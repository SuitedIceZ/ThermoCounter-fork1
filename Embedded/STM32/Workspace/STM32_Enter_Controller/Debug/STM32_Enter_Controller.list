
STM32_Enter_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000101ec  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154cc  080154cc  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  080154cc  080154cc  000254cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154d4  080154d4  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154d4  080154d4  000254d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154d8  080154d8  000254d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080154dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  0801554c  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0801554c  00030260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ecd  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f40  00000000  00000000  00040f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00042eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00043d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001703a  00000000  00000000  00044b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111c1  00000000  00000000  0005bb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903a4  00000000  00000000  0006cd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd0bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000fd114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052c8 	.word	0x080052c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080052c8 	.word	0x080052c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b96e 	b.w	8000bf0 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	4604      	mov	r4, r0
 8000934:	468c      	mov	ip, r1
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8083 	bne.w	8000a42 <__udivmoddi4+0x116>
 800093c:	428a      	cmp	r2, r1
 800093e:	4617      	mov	r7, r2
 8000940:	d947      	bls.n	80009d2 <__udivmoddi4+0xa6>
 8000942:	fab2 f282 	clz	r2, r2
 8000946:	b142      	cbz	r2, 800095a <__udivmoddi4+0x2e>
 8000948:	f1c2 0020 	rsb	r0, r2, #32
 800094c:	fa24 f000 	lsr.w	r0, r4, r0
 8000950:	4091      	lsls	r1, r2
 8000952:	4097      	lsls	r7, r2
 8000954:	ea40 0c01 	orr.w	ip, r0, r1
 8000958:	4094      	lsls	r4, r2
 800095a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800095e:	0c23      	lsrs	r3, r4, #16
 8000960:	fbbc f6f8 	udiv	r6, ip, r8
 8000964:	fa1f fe87 	uxth.w	lr, r7
 8000968:	fb08 c116 	mls	r1, r8, r6, ip
 800096c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000970:	fb06 f10e 	mul.w	r1, r6, lr
 8000974:	4299      	cmp	r1, r3
 8000976:	d909      	bls.n	800098c <__udivmoddi4+0x60>
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	f106 30ff 	add.w	r0, r6, #4294967295
 800097e:	f080 8119 	bcs.w	8000bb4 <__udivmoddi4+0x288>
 8000982:	4299      	cmp	r1, r3
 8000984:	f240 8116 	bls.w	8000bb4 <__udivmoddi4+0x288>
 8000988:	3e02      	subs	r6, #2
 800098a:	443b      	add	r3, r7
 800098c:	1a5b      	subs	r3, r3, r1
 800098e:	b2a4      	uxth	r4, r4
 8000990:	fbb3 f0f8 	udiv	r0, r3, r8
 8000994:	fb08 3310 	mls	r3, r8, r0, r3
 8000998:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800099c:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	d909      	bls.n	80009b8 <__udivmoddi4+0x8c>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009aa:	f080 8105 	bcs.w	8000bb8 <__udivmoddi4+0x28c>
 80009ae:	45a6      	cmp	lr, r4
 80009b0:	f240 8102 	bls.w	8000bb8 <__udivmoddi4+0x28c>
 80009b4:	3802      	subs	r0, #2
 80009b6:	443c      	add	r4, r7
 80009b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009bc:	eba4 040e 	sub.w	r4, r4, lr
 80009c0:	2600      	movs	r6, #0
 80009c2:	b11d      	cbz	r5, 80009cc <__udivmoddi4+0xa0>
 80009c4:	40d4      	lsrs	r4, r2
 80009c6:	2300      	movs	r3, #0
 80009c8:	e9c5 4300 	strd	r4, r3, [r5]
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	b902      	cbnz	r2, 80009d6 <__udivmoddi4+0xaa>
 80009d4:	deff      	udf	#255	; 0xff
 80009d6:	fab2 f282 	clz	r2, r2
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d150      	bne.n	8000a80 <__udivmoddi4+0x154>
 80009de:	1bcb      	subs	r3, r1, r7
 80009e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009e4:	fa1f f887 	uxth.w	r8, r7
 80009e8:	2601      	movs	r6, #1
 80009ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ee:	0c21      	lsrs	r1, r4, #16
 80009f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb08 f30c 	mul.w	r3, r8, ip
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0xe4>
 8000a00:	1879      	adds	r1, r7, r1
 8000a02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0xe2>
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	f200 80e9 	bhi.w	8000be0 <__udivmoddi4+0x2b4>
 8000a0e:	4684      	mov	ip, r0
 8000a10:	1ac9      	subs	r1, r1, r3
 8000a12:	b2a3      	uxth	r3, r4
 8000a14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a20:	fb08 f800 	mul.w	r8, r8, r0
 8000a24:	45a0      	cmp	r8, r4
 8000a26:	d907      	bls.n	8000a38 <__udivmoddi4+0x10c>
 8000a28:	193c      	adds	r4, r7, r4
 8000a2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x10a>
 8000a30:	45a0      	cmp	r8, r4
 8000a32:	f200 80d9 	bhi.w	8000be8 <__udivmoddi4+0x2bc>
 8000a36:	4618      	mov	r0, r3
 8000a38:	eba4 0408 	sub.w	r4, r4, r8
 8000a3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a40:	e7bf      	b.n	80009c2 <__udivmoddi4+0x96>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d909      	bls.n	8000a5a <__udivmoddi4+0x12e>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	f000 80b1 	beq.w	8000bae <__udivmoddi4+0x282>
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a52:	4630      	mov	r0, r6
 8000a54:	4631      	mov	r1, r6
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	fab3 f683 	clz	r6, r3
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d14a      	bne.n	8000af8 <__udivmoddi4+0x1cc>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d302      	bcc.n	8000a6c <__udivmoddi4+0x140>
 8000a66:	4282      	cmp	r2, r0
 8000a68:	f200 80b8 	bhi.w	8000bdc <__udivmoddi4+0x2b0>
 8000a6c:	1a84      	subs	r4, r0, r2
 8000a6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a72:	2001      	movs	r0, #1
 8000a74:	468c      	mov	ip, r1
 8000a76:	2d00      	cmp	r5, #0
 8000a78:	d0a8      	beq.n	80009cc <__udivmoddi4+0xa0>
 8000a7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a7e:	e7a5      	b.n	80009cc <__udivmoddi4+0xa0>
 8000a80:	f1c2 0320 	rsb	r3, r2, #32
 8000a84:	fa20 f603 	lsr.w	r6, r0, r3
 8000a88:	4097      	lsls	r7, r2
 8000a8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a92:	40d9      	lsrs	r1, r3
 8000a94:	4330      	orrs	r0, r6
 8000a96:	0c03      	lsrs	r3, r0, #16
 8000a98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000aa4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa8:	fb06 f108 	mul.w	r1, r6, r8
 8000aac:	4299      	cmp	r1, r3
 8000aae:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x19c>
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aba:	f080 808d 	bcs.w	8000bd8 <__udivmoddi4+0x2ac>
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	f240 808a 	bls.w	8000bd8 <__udivmoddi4+0x2ac>
 8000ac4:	3e02      	subs	r6, #2
 8000ac6:	443b      	add	r3, r7
 8000ac8:	1a5b      	subs	r3, r3, r1
 8000aca:	b281      	uxth	r1, r0
 8000acc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ad0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ad4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad8:	fb00 f308 	mul.w	r3, r0, r8
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x1c4>
 8000ae0:	1879      	adds	r1, r7, r1
 8000ae2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ae6:	d273      	bcs.n	8000bd0 <__udivmoddi4+0x2a4>
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d971      	bls.n	8000bd0 <__udivmoddi4+0x2a4>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4439      	add	r1, r7
 8000af0:	1acb      	subs	r3, r1, r3
 8000af2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000af6:	e778      	b.n	80009ea <__udivmoddi4+0xbe>
 8000af8:	f1c6 0c20 	rsb	ip, r6, #32
 8000afc:	fa03 f406 	lsl.w	r4, r3, r6
 8000b00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b04:	431c      	orrs	r4, r3
 8000b06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b16:	431f      	orrs	r7, r3
 8000b18:	0c3b      	lsrs	r3, r7, #16
 8000b1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b1e:	fa1f f884 	uxth.w	r8, r4
 8000b22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b2e:	458a      	cmp	sl, r1
 8000b30:	fa02 f206 	lsl.w	r2, r2, r6
 8000b34:	fa00 f306 	lsl.w	r3, r0, r6
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x220>
 8000b3a:	1861      	adds	r1, r4, r1
 8000b3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b40:	d248      	bcs.n	8000bd4 <__udivmoddi4+0x2a8>
 8000b42:	458a      	cmp	sl, r1
 8000b44:	d946      	bls.n	8000bd4 <__udivmoddi4+0x2a8>
 8000b46:	f1a9 0902 	sub.w	r9, r9, #2
 8000b4a:	4421      	add	r1, r4
 8000b4c:	eba1 010a 	sub.w	r1, r1, sl
 8000b50:	b2bf      	uxth	r7, r7
 8000b52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b5e:	fb00 f808 	mul.w	r8, r0, r8
 8000b62:	45b8      	cmp	r8, r7
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0x24a>
 8000b66:	19e7      	adds	r7, r4, r7
 8000b68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b6c:	d22e      	bcs.n	8000bcc <__udivmoddi4+0x2a0>
 8000b6e:	45b8      	cmp	r8, r7
 8000b70:	d92c      	bls.n	8000bcc <__udivmoddi4+0x2a0>
 8000b72:	3802      	subs	r0, #2
 8000b74:	4427      	add	r7, r4
 8000b76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b7a:	eba7 0708 	sub.w	r7, r7, r8
 8000b7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b82:	454f      	cmp	r7, r9
 8000b84:	46c6      	mov	lr, r8
 8000b86:	4649      	mov	r1, r9
 8000b88:	d31a      	bcc.n	8000bc0 <__udivmoddi4+0x294>
 8000b8a:	d017      	beq.n	8000bbc <__udivmoddi4+0x290>
 8000b8c:	b15d      	cbz	r5, 8000ba6 <__udivmoddi4+0x27a>
 8000b8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b92:	eb67 0701 	sbc.w	r7, r7, r1
 8000b96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b9a:	40f2      	lsrs	r2, r6
 8000b9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ba0:	40f7      	lsrs	r7, r6
 8000ba2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ba6:	2600      	movs	r6, #0
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e70b      	b.n	80009cc <__udivmoddi4+0xa0>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e9      	b.n	800098c <__udivmoddi4+0x60>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6fd      	b.n	80009b8 <__udivmoddi4+0x8c>
 8000bbc:	4543      	cmp	r3, r8
 8000bbe:	d2e5      	bcs.n	8000b8c <__udivmoddi4+0x260>
 8000bc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7df      	b.n	8000b8c <__udivmoddi4+0x260>
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e7d2      	b.n	8000b76 <__udivmoddi4+0x24a>
 8000bd0:	4660      	mov	r0, ip
 8000bd2:	e78d      	b.n	8000af0 <__udivmoddi4+0x1c4>
 8000bd4:	4681      	mov	r9, r0
 8000bd6:	e7b9      	b.n	8000b4c <__udivmoddi4+0x220>
 8000bd8:	4666      	mov	r6, ip
 8000bda:	e775      	b.n	8000ac8 <__udivmoddi4+0x19c>
 8000bdc:	4630      	mov	r0, r6
 8000bde:	e74a      	b.n	8000a76 <__udivmoddi4+0x14a>
 8000be0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000be4:	4439      	add	r1, r7
 8000be6:	e713      	b.n	8000a10 <__udivmoddi4+0xe4>
 8000be8:	3802      	subs	r0, #2
 8000bea:	443c      	add	r4, r7
 8000bec:	e724      	b.n	8000a38 <__udivmoddi4+0x10c>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_idiv0>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8000c04:	e015      	b.n	8000c32 <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	4053      	eors	r3, r2
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8000c1a:	89bb      	ldrh	r3, [r7, #12]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <CRC8_Calc+0x58>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	89fb      	ldrh	r3, [r7, #14]
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4053      	eors	r3, r2
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	70fa      	strb	r2, [r7, #3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1e4      	bne.n	8000c06 <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	b2db      	uxtb	r3, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	08005380 	.word	0x08005380

08000c50 <MLX90614_WriteReg>:

void MLX90614_WriteReg(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71bb      	strb	r3, [r7, #6]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80bb      	strh	r3, [r7, #4]

	uint8_t i2cdata[4], temp[4];

	temp[0] = (devAddr << 1);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	723b      	strb	r3, [r7, #8]
	temp[1] = regAddr;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	727b      	strb	r3, [r7, #9]

	temp[2] = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	72bb      	strb	r3, [r7, #10]
	temp[3] = 0x00;
 8000c72:	2300      	movs	r3, #0
 8000c74:	72fb      	strb	r3, [r7, #11]

	// For a write word command, in the crc8 calculus, you have to include [SA_W, Command, LSB, MSB]

	i2cdata[0] = temp[1]; //EEPROM-address
 8000c76:	7a7b      	ldrb	r3, [r7, #9]
 8000c78:	733b      	strb	r3, [r7, #12]
	i2cdata[1] = temp[2]; //Delete-Byte, low
 8000c7a:	7abb      	ldrb	r3, [r7, #10]
 8000c7c:	737b      	strb	r3, [r7, #13]
	i2cdata[2] = temp[3]; //Delete-Byte, high
 8000c7e:	7afb      	ldrb	r3, [r7, #11]
 8000c80:	73bb      	strb	r3, [r7, #14]
	i2cdata[3] = CRC8_Calc(temp, 4); //CRC8-checksum calculation: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2104      	movs	r1, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffb3 	bl	8000bf4 <CRC8_Calc>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	f107 020c 	add.w	r2, r7, #12
 8000c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	4818      	ldr	r0, [pc, #96]	; (8000d08 <MLX90614_WriteReg+0xb8>)
 8000ca8:	f001 fa9c 	bl	80021e4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000cac:	200a      	movs	r0, #10
 8000cae:	f000 fe7b 	bl	80019a8 <HAL_Delay>

	//MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], (i2cdata[1] <<8 | i2cdata[2]), i2cdata[3], 0x00);

	temp[2] = data & 0xFF; //Getting LSB first
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	72bb      	strb	r3, [r7, #10]
	temp[3] = data >> 8;   //Getting MSB after
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	72fb      	strb	r3, [r7, #11]

	i2cdata[0] = temp[1]; //EEPROM-address
 8000cc2:	7a7b      	ldrb	r3, [r7, #9]
 8000cc4:	733b      	strb	r3, [r7, #12]
	i2cdata[1] = temp[2]; //Delete-Byte, low
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	737b      	strb	r3, [r7, #13]
	i2cdata[2] = temp[3]; //Delete-Byte, high
 8000cca:	7afb      	ldrb	r3, [r7, #11]
 8000ccc:	73bb      	strb	r3, [r7, #14]
	i2cdata[3] = CRC8_Calc(temp, 4); //CRC8-checksum calculation: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff8d 	bl	8000bf4 <CRC8_Calc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MLX90614_WriteReg+0xb8>)
 8000cf4:	f001 fa76 	bl	80021e4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f000 fe55 	bl	80019a8 <HAL_Delay>
	//MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000016c 	.word	0x2000016c

08000d0c <MLX90614_ReadReg>:
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af04      	add	r7, sp, #16
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	460b      	mov	r3, r1
 8000d18:	71bb      	strb	r3, [r7, #6]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b299      	uxth	r1, r3
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2303      	movs	r3, #3
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	4817      	ldr	r0, [pc, #92]	; (8000d98 <MLX90614_ReadReg+0x8c>)
 8000d3c:	f001 fb50 	bl	80023e0 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8000d58:	7c3b      	ldrb	r3, [r7, #16]
 8000d5a:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8000d5c:	7c7b      	ldrb	r3, [r7, #17]
 8000d5e:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	2105      	movs	r1, #5
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff44 	bl	8000bf4 <CRC8_Calc>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 8000d70:	7c7b      	ldrb	r3, [r7, #17]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	7c3b      	ldrb	r3, [r7, #16]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 8000d80:	7cbb      	ldrb	r3, [r7, #18]
 8000d82:	7d7a      	ldrb	r2, [r7, #21]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d001      	beq.n	8000d8c <MLX90614_ReadReg+0x80>
		data = 0x0000;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	82fb      	strh	r3, [r7, #22]
	}
	//if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);

	//HAL_Delay(1);
	return data;
 8000d8c:	8afb      	ldrh	r3, [r7, #22]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000016c 	.word	0x2000016c
 8000d9c:	00000000 	.word	0x00000000

08000da0 <MLX90614_ReadTemp>:
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF);
 8000db0:	79b9      	ldrb	r1, [r7, #6]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffa8 	bl	8000d0c <MLX90614_ReadReg>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	81fb      	strh	r3, [r7, #14]
	temp = data*0.02 - 273.15;
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fce0 	bl	8000788 <__aeabi_i2d>
 8000dc8:	a30f      	add	r3, pc, #60	; (adr r3, 8000e08 <MLX90614_ReadTemp+0x68>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fa5f 	bl	8000290 <__aeabi_dmul>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4619      	mov	r1, r3
 8000dda:	a30d      	add	r3, pc, #52	; (adr r3, 8000e10 <MLX90614_ReadTemp+0x70>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f7ff fb84 	bl	80004ec <__aeabi_dsub>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fd36 	bl	800085c <__aeabi_d2f>
 8000df0:	4603      	mov	r3, r0
 8000df2:	60bb      	str	r3, [r7, #8]

	return temp;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	ee07 3a90 	vmov	s15, r3
}
 8000dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	f3af 8000 	nop.w
 8000e08:	47ae147b 	.word	0x47ae147b
 8000e0c:	3f947ae1 	.word	0x3f947ae1
 8000e10:	66666666 	.word	0x66666666
 8000e14:	40711266 	.word	0x40711266

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000e1e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f000 fd50 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f962 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f000 fac8 	bl	80013bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e2c:	f000 fa9c 	bl	8001368 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e30:	f000 f9c8 	bl	80011c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000e34:	f000 f9f4 	bl	8001220 <MX_I2C3_Init>
  MX_TIM2_Init();
 8000e38:	f000 fa20 	bl	800127c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int temp_obj1, temp_obj2, temp_amb;

  HAL_Delay(10000);
 8000e3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e40:	f000 fdb2 	bl	80019a8 <HAL_Delay>

  sprintf(usb_tx_buff, "Starting reading in 3 sec..\r\n");
 8000e44:	499d      	ldr	r1, [pc, #628]	; (80010bc <main+0x2a4>)
 8000e46:	489e      	ldr	r0, [pc, #632]	; (80010c0 <main+0x2a8>)
 8000e48:	f003 fe10 	bl	8004a6c <siprintf>
  HAL_UART_Transmit(&huart2, &usb_tx_buff, strlen(usb_tx_buff), 1000);
 8000e4c:	489c      	ldr	r0, [pc, #624]	; (80010c0 <main+0x2a8>)
 8000e4e:	f7ff f9c7 	bl	80001e0 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	4999      	ldr	r1, [pc, #612]	; (80010c0 <main+0x2a8>)
 8000e5c:	4899      	ldr	r0, [pc, #612]	; (80010c4 <main+0x2ac>)
 8000e5e:	f003 fb0a 	bl	8004476 <HAL_UART_Transmit>
  HAL_Delay(3000);
 8000e62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e66:	f000 fd9f 	bl	80019a8 <HAL_Delay>

  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_TOMIN, MLX90614_DBG_ON);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	205a      	movs	r0, #90	; 0x5a
 8000e70:	f7ff ff4c 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_TOMAX, MLX90614_DBG_ON);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2121      	movs	r1, #33	; 0x21
 8000e78:	205a      	movs	r0, #90	; 0x5a
 8000e7a:	f7ff ff47 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_PWMCTRL, MLX90614_DBG_ON);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2122      	movs	r1, #34	; 0x22
 8000e82:	205a      	movs	r0, #90	; 0x5a
 8000e84:	f7ff ff42 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_TARANGE, MLX90614_DBG_ON);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2123      	movs	r1, #35	; 0x23
 8000e8c:	205a      	movs	r0, #90	; 0x5a
 8000e8e:	f7ff ff3d 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_EMISSIVITY, MLX90614_DBG_ON);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2124      	movs	r1, #36	; 0x24
 8000e96:	205a      	movs	r0, #90	; 0x5a
 8000e98:	f7ff ff38 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_CFG1, MLX90614_DBG_ON);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2125      	movs	r1, #37	; 0x25
 8000ea0:	205a      	movs	r0, #90	; 0x5a
 8000ea2:	f7ff ff33 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_SA, MLX90614_DBG_ON);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	212e      	movs	r1, #46	; 0x2e
 8000eaa:	205a      	movs	r0, #90	; 0x5a
 8000eac:	f7ff ff2e 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID1, MLX90614_DBG_ON);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	213c      	movs	r1, #60	; 0x3c
 8000eb4:	205a      	movs	r0, #90	; 0x5a
 8000eb6:	f7ff ff29 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID2, MLX90614_DBG_ON);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	213d      	movs	r1, #61	; 0x3d
 8000ebe:	205a      	movs	r0, #90	; 0x5a
 8000ec0:	f7ff ff24 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID3, MLX90614_DBG_ON);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	213e      	movs	r1, #62	; 0x3e
 8000ec8:	205a      	movs	r0, #90	; 0x5a
 8000eca:	f7ff ff1f 	bl	8000d0c <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID4, MLX90614_DBG_ON);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	213f      	movs	r1, #63	; 0x3f
 8000ed2:	205a      	movs	r0, #90	; 0x5a
 8000ed4:	f7ff ff1a 	bl	8000d0c <MLX90614_ReadReg>

  sprintf(usb_tx_buff, "Writing regs: \r\n");
 8000ed8:	497b      	ldr	r1, [pc, #492]	; (80010c8 <main+0x2b0>)
 8000eda:	4879      	ldr	r0, [pc, #484]	; (80010c0 <main+0x2a8>)
 8000edc:	f003 fdc6 	bl	8004a6c <siprintf>
  HAL_UART_Transmit(&huart2, &usb_tx_buff, strlen(usb_tx_buff), 1000);
 8000ee0:	4877      	ldr	r0, [pc, #476]	; (80010c0 <main+0x2a8>)
 8000ee2:	f7ff f97d 	bl	80001e0 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	4974      	ldr	r1, [pc, #464]	; (80010c0 <main+0x2a8>)
 8000ef0:	4874      	ldr	r0, [pc, #464]	; (80010c4 <main+0x2ac>)
 8000ef2:	f003 fac0 	bl	8004476 <HAL_UART_Transmit>

  MLX90614_WriteReg(MLX90614_DEFAULT_SA, MLX90614_CFG1, 0xB7C0);
 8000ef6:	f24b 72c0 	movw	r2, #47040	; 0xb7c0
 8000efa:	2125      	movs	r1, #37	; 0x25
 8000efc:	205a      	movs	r0, #90	; 0x5a
 8000efe:	f7ff fea7 	bl	8000c50 <MLX90614_WriteReg>

  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_CFG1, MLX90614_DBG_ON);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2125      	movs	r1, #37	; 0x25
 8000f06:	205a      	movs	r0, #90	; 0x5a
 8000f08:	f7ff ff00 	bl	8000d0c <MLX90614_ReadReg>

  MLX90614_WriteReg(MLX90614_DEFAULT_SA, MLX90614_PWMCTRL, 0x1405);
 8000f0c:	f241 4205 	movw	r2, #5125	; 0x1405
 8000f10:	2122      	movs	r1, #34	; 0x22
 8000f12:	205a      	movs	r0, #90	; 0x5a
 8000f14:	f7ff fe9c 	bl	8000c50 <MLX90614_WriteReg>

  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_PWMCTRL, MLX90614_DBG_ON);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2122      	movs	r1, #34	; 0x22
 8000f1c:	205a      	movs	r0, #90	; 0x5a
 8000f1e:	f7ff fef5 	bl	8000d0c <MLX90614_ReadReg>

  sprintf(usb_tx_buff, "Starting loop in 500 msec..\r\n");
 8000f22:	496a      	ldr	r1, [pc, #424]	; (80010cc <main+0x2b4>)
 8000f24:	4866      	ldr	r0, [pc, #408]	; (80010c0 <main+0x2a8>)
 8000f26:	f003 fda1 	bl	8004a6c <siprintf>
  HAL_UART_Transmit(&huart2, &usb_tx_buff, strlen(usb_tx_buff), 1000);
 8000f2a:	4865      	ldr	r0, [pc, #404]	; (80010c0 <main+0x2a8>)
 8000f2c:	f7ff f958 	bl	80001e0 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	4961      	ldr	r1, [pc, #388]	; (80010c0 <main+0x2a8>)
 8000f3a:	4862      	ldr	r0, [pc, #392]	; (80010c4 <main+0x2ac>)
 8000f3c:	f003 fa9b 	bl	8004476 <HAL_UART_Transmit>

  HAL_Delay(500);
 8000f40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f44:	f000 fd30 	bl	80019a8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer[1000];
  int OneShot = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

  //Sound const.
  int k = 14;
 8000f4e:	230e      	movs	r3, #14
 8000f50:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  int size = 65536; //65536
 8000f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f58:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	485c      	ldr	r0, [pc, #368]	; (80010d0 <main+0x2b8>)
 8000f60:	f002 fcc8 	bl	80038f4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int IR_value = HAL_GPIO_ReadPin(IR1_GPIO_Port, IR1_Pin);
 8000f64:	2108      	movs	r1, #8
 8000f66:	485b      	ldr	r0, [pc, #364]	; (80010d4 <main+0x2bc>)
 8000f68:	f000 ffac 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
	  sprintf(buffer,"Infrared value = %d\n\r",IR_value);
 8000f72:	463b      	mov	r3, r7
 8000f74:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 8000f78:	4957      	ldr	r1, [pc, #348]	; (80010d8 <main+0x2c0>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fd76 	bl	8004a6c <siprintf>
	  HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 1000);
 8000f80:	463b      	mov	r3, r7
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f92c 	bl	80001e0 <strlen>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	484c      	ldr	r0, [pc, #304]	; (80010c4 <main+0x2ac>)
 8000f94:	f003 fa6f 	bl	8004476 <HAL_UART_Transmit>



	  if(IR_value == 0 && OneShot == 0){ //found object
 8000f98:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d179      	bne.n	8001094 <main+0x27c>
 8000fa0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d175      	bne.n	8001094 <main+0x27c>
		  OneShot = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		  sprintf(buffer,"Found object\n\r");
 8000fae:	463b      	mov	r3, r7
 8000fb0:	494a      	ldr	r1, [pc, #296]	; (80010dc <main+0x2c4>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fd5a 	bl	8004a6c <siprintf>
		  HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 1000);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f910 	bl	80001e0 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	483e      	ldr	r0, [pc, #248]	; (80010c4 <main+0x2ac>)
 8000fcc:	f003 fa53 	bl	8004476 <HAL_UART_Transmit>

		  //Temperature Sensor
		  HAL_Delay(5);
 8000fd0:	2005      	movs	r0, #5
 8000fd2:	f000 fce9 	bl	80019a8 <HAL_Delay>
		  temp_obj1 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	205a      	movs	r0, #90	; 0x5a
 8000fda:	f7ff fee1 	bl	8000da0 <MLX90614_ReadTemp>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe6:	ee17 3a90 	vmov	r3, s15
 8000fea:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
		  HAL_Delay(5);
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f000 fcda 	bl	80019a8 <HAL_Delay>
		  temp_obj2 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ2);;
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	205a      	movs	r0, #90	; 0x5a
 8000ff8:	f7ff fed2 	bl	8000da0 <MLX90614_ReadTemp>
 8000ffc:	eef0 7a40 	vmov.f32	s15, s0
 8001000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001004:	ee17 3a90 	vmov	r3, s15
 8001008:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
		  HAL_Delay(5);
 800100c:	2005      	movs	r0, #5
 800100e:	f000 fccb 	bl	80019a8 <HAL_Delay>
		  temp_amb = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB);;
 8001012:	2106      	movs	r1, #6
 8001014:	205a      	movs	r0, #90	; 0x5a
 8001016:	f7ff fec3 	bl	8000da0 <MLX90614_ReadTemp>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001022:	ee17 3a90 	vmov	r3, s15
 8001026:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
		  sprintf(usb_tx_buff, "T obj1: %d, T obj2: %d, T amb: %d\r\n", temp_obj1, temp_obj2, temp_amb);
 800102a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001034:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8001038:	4929      	ldr	r1, [pc, #164]	; (80010e0 <main+0x2c8>)
 800103a:	4821      	ldr	r0, [pc, #132]	; (80010c0 <main+0x2a8>)
 800103c:	f003 fd16 	bl	8004a6c <siprintf>
		  HAL_UART_Transmit(&huart2, &usb_tx_buff, strlen(usb_tx_buff), 1000);
 8001040:	481f      	ldr	r0, [pc, #124]	; (80010c0 <main+0x2a8>)
 8001042:	f7ff f8cd 	bl	80001e0 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	491c      	ldr	r1, [pc, #112]	; (80010c0 <main+0x2a8>)
 8001050:	481c      	ldr	r0, [pc, #112]	; (80010c4 <main+0x2ac>)
 8001052:	f003 fa10 	bl	8004476 <HAL_UART_Transmit>


		  //Speaker play sound
	 	  for(int i = 0 ; i < (int)(size*k) ; i++ ){ //sizeof(__USER_DATA)/sizeof(uint8_t)
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800105c:	e00f      	b.n	800107e <main+0x266>
	 		TIM2->CCR1 = __USER_DATA[(int)(i/k)];
 800105e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8001062:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001066:	fb92 f3f3 	sdiv	r3, r2, r3
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <main+0x2cc>)
 800106c:	5cd2      	ldrb	r2, [r2, r3]
 800106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
	 	  for(int i = 0 ; i < (int)(size*k) ; i++ ){ //sizeof(__USER_DATA)/sizeof(uint8_t)
 8001074:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001078:	3301      	adds	r3, #1
 800107a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800107e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001082:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 800108e:	429a      	cmp	r2, r3
 8001090:	dbe5      	blt.n	800105e <main+0x246>
 8001092:	e00a      	b.n	80010aa <main+0x292>
	 	  }

	  }
	  else if(IR_value == 1 && OneShot == 1){
 8001094:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001098:	2b01      	cmp	r3, #1
 800109a:	d106      	bne.n	80010aa <main+0x292>
 800109c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d102      	bne.n	80010aa <main+0x292>
		  OneShot = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	  }
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010aa:	2120      	movs	r1, #32
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <main+0x2d0>)
 80010ae:	f000 ff3a 	bl	8001f26 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	f000 fc77 	bl	80019a8 <HAL_Delay>
  {
 80010ba:	e753      	b.n	8000f64 <main+0x14c>
 80010bc:	080052e0 	.word	0x080052e0
 80010c0:	2000008c 	.word	0x2000008c
 80010c4:	20000208 	.word	0x20000208
 80010c8:	08005300 	.word	0x08005300
 80010cc:	08005314 	.word	0x08005314
 80010d0:	200001c0 	.word	0x200001c0
 80010d4:	40020800 	.word	0x40020800
 80010d8:	08005334 	.word	0x08005334
 80010dc:	0800534c 	.word	0x0800534c
 80010e0:	0800535c 	.word	0x0800535c
 80010e4:	08005480 	.word	0x08005480
 80010e8:	40020000 	.word	0x40020000

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fcae 	bl	8004a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <SystemClock_Config+0xd0>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <SystemClock_Config+0xd0>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <SystemClock_Config+0xd0>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <SystemClock_Config+0xd4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <SystemClock_Config+0xd4>)
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <SystemClock_Config+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2310      	movs	r3, #16
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001160:	2310      	movs	r3, #16
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001164:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800116a:	2304      	movs	r3, #4
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800116e:	2307      	movs	r3, #7
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fea0 	bl	8002ebc <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001182:	f000 f995 	bl	80014b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 f902 	bl	80033ac <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ae:	f000 f97f 	bl	80014b0 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3750      	adds	r7, #80	; 0x50
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C1_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C1_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C1_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_I2C1_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_I2C1_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C1_Init+0x50>)
 8001202:	f000 feab 	bl	8001f5c <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 f950 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000016c 	.word	0x2000016c
 8001218:	40005400 	.word	0x40005400
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C3_Init+0x50>)
 8001226:	4a13      	ldr	r2, [pc, #76]	; (8001274 <MX_I2C3_Init+0x54>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_I2C3_Init+0x50>)
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_I2C3_Init+0x58>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C3_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_I2C3_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_I2C3_Init+0x50>)
 800123e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001242:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_I2C3_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_I2C3_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_I2C3_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_I2C3_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_I2C3_Init+0x50>)
 800125e:	f000 fe7d 	bl	8001f5c <HAL_I2C_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 f922 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000118 	.word	0x20000118
 8001274:	40005c00 	.word	0x40005c00
 8001278:	000186a0 	.word	0x000186a0

0800127c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012d6:	f002 fa65 	bl	80037a4 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012e0:	f000 f8e6 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <MX_TIM2_Init+0xe8>)
 80012f2:	f002 fc71 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012fc:	f000 f8d8 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <MX_TIM2_Init+0xe8>)
 8001302:	f002 fa9e 	bl	8003842 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 f8d0 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_TIM2_Init+0xe8>)
 8001320:	f002 ffee 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800132a:	f000 f8c1 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	; 0x60
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <MX_TIM2_Init+0xe8>)
 8001346:	f002 fb85 	bl	8003a54 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001350:	f000 f8ae 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <MX_TIM2_Init+0xe8>)
 8001356:	f000 f999 	bl	800168c <HAL_TIM_MspPostInit>

}
 800135a:	bf00      	nop
 800135c:	3738      	adds	r7, #56	; 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001c0 	.word	0x200001c0

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f003 f81c 	bl	80043dc <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f881 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000208 	.word	0x20000208
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <MX_GPIO_Init+0xe8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <MX_GPIO_Init+0xe8>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_GPIO_Init+0xe8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <MX_GPIO_Init+0xe8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <MX_GPIO_Init+0xe8>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_GPIO_Init+0xe8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_GPIO_Init+0xe8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <MX_GPIO_Init+0xe8>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_GPIO_Init+0xe8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_GPIO_Init+0xe8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <MX_GPIO_Init+0xe8>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_GPIO_Init+0xe8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	4818      	ldr	r0, [pc, #96]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001448:	f000 fd54 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001452:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4812      	ldr	r0, [pc, #72]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001464:	f000 fbaa 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IR1_Pin */
  GPIO_InitStruct.Pin = IR1_Pin;
 8001468:	2308      	movs	r3, #8
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR1_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_GPIO_Init+0xf0>)
 800147c:	f000 fb9e 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001480:	2320      	movs	r3, #32
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001498:	f000 fb90 	bl	8001bbc <HAL_GPIO_Init>

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020800 	.word	0x40020800

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_MspInit+0x4c>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x4c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014fa:	2007      	movs	r0, #7
 80014fc:	f000 fb2a 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_I2C_MspInit+0x128>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12d      	bne.n	800158a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001550:	2312      	movs	r3, #18
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155c:	2304      	movs	r3, #4
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4835      	ldr	r0, [pc, #212]	; (800163c <HAL_I2C_MspInit+0x130>)
 8001568:	f000 fb28 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a30      	ldr	r2, [pc, #192]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001588:	e050      	b.n	800162c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <HAL_I2C_MspInit+0x134>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d14b      	bne.n	800162c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015de:	2304      	movs	r3, #4
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4816      	ldr	r0, [pc, #88]	; (8001644 <HAL_I2C_MspInit+0x138>)
 80015ea:	f000 fae7 	bl	8001bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001600:	2304      	movs	r3, #4
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_I2C_MspInit+0x13c>)
 800160c:	f000 fad6 	bl	8001bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 800161a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_I2C_MspInit+0x12c>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
}
 800162c:	bf00      	nop
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40005c00 	.word	0x40005c00
 8001644:	40020800 	.word	0x40020800
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165c:	d10d      	bne.n	800167a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_TIM_Base_MspInit+0x3c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_TIM_Base_MspInit+0x3c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_TIM_Base_MspInit+0x3c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d11d      	bne.n	80016ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ca:	2301      	movs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <HAL_TIM_MspPostInit+0x6c>)
 80016e6:	f000 fa69 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_UART_MspInit+0x84>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d12b      	bne.n	8001776 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_UART_MspInit+0x88>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_UART_MspInit+0x88>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001756:	230c      	movs	r3, #12
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001766:	2307      	movs	r3, #7
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0x8c>)
 8001772:	f000 fa23 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40004400 	.word	0x40004400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f8c6 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f003 f8fa 	bl	8004a08 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20018000 	.word	0x20018000
 8001840:	00000400 	.word	0x00000400
 8001844:	2000010c 	.word	0x2000010c
 8001848:	20000260 	.word	0x20000260

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001876:	490e      	ldr	r1, [pc, #56]	; (80018b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800188c:	4c0b      	ldr	r4, [pc, #44]	; (80018bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800189a:	f7ff ffd7 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189e:	f003 f8b9 	bl	8004a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff fab9 	bl	8000e18 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018b4:	080154dc 	.word	0x080154dc
  ldr r2, =_sbss
 80018b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018bc:	20000260 	.word	0x20000260

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f931 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fde0 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f93b 	bl	8001ba2 <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f911 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	2000024c 	.word	0x2000024c

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000024c 	.word	0x2000024c

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff47 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff5c 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffb0 	bl	8001b10 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e159      	b.n	8001e8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 8148 	bne.w	8001e86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a2 	beq.w	8001e86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a56      	ldr	r2, [pc, #344]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a49      	ldr	r2, [pc, #292]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x202>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <HAL_GPIO_Init+0x2f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x1fe>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a47      	ldr	r2, [pc, #284]	; (8001eb4 <HAL_GPIO_Init+0x2f8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <HAL_GPIO_Init+0x2fc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x1f6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a45      	ldr	r2, [pc, #276]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x1f2>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e02:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f aea2 	bls.w	8001bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	041a      	lsls	r2, r3, #16
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	400b      	ands	r3, r1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e12b      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fac2 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f001 fbc8 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8001fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a81      	ldr	r2, [pc, #516]	; (80021d0 <HAL_I2C_Init+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d807      	bhi.n	8001fe0 <HAL_I2C_Init+0x84>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_I2C_Init+0x278>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e006      	b.n	8001fee <HAL_I2C_Init+0x92>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a7d      	ldr	r2, [pc, #500]	; (80021d8 <HAL_I2C_Init+0x27c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0e7      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_I2C_Init+0x280>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9b      	lsrs	r3, r3, #18
 8002000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	430a      	orrs	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d802      	bhi.n	8002030 <HAL_I2C_Init+0xd4>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	e009      	b.n	8002044 <HAL_I2C_Init+0xe8>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_I2C_Init+0x284>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	3301      	adds	r3, #1
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	495c      	ldr	r1, [pc, #368]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002060:	428b      	cmp	r3, r1
 8002062:	d819      	bhi.n	8002098 <HAL_I2C_Init+0x13c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e59      	subs	r1, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002072:	1c59      	adds	r1, r3, #1
 8002074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002078:	400b      	ands	r3, r1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_I2C_Init+0x138>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e59      	subs	r1, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fbb1 f3f3 	udiv	r3, r1, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	e051      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002094:	2304      	movs	r3, #4
 8002096:	e04f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_I2C_Init+0x168>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e012      	b.n	80020ea <HAL_I2C_Init+0x18e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x196>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e022      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10e      	bne.n	8002118 <HAL_I2C_Init+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e58      	subs	r0, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	fbb0 f3f3 	udiv	r3, r0, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002116:	e00f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	0099      	lsls	r1, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	6809      	ldr	r1, [r1, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6911      	ldr	r1, [r2, #16]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	000186a0 	.word	0x000186a0
 80021d4:	001e847f 	.word	0x001e847f
 80021d8:	003d08ff 	.word	0x003d08ff
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	10624dd3 	.word	0x10624dd3

080021e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	460b      	mov	r3, r1
 80021f2:	817b      	strh	r3, [r7, #10]
 80021f4:	4613      	mov	r3, r2
 80021f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fbca 	bl	8001990 <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	f040 80e0 	bne.w	80023cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	4970      	ldr	r1, [pc, #448]	; (80023d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fc72 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	e0d3      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_I2C_Master_Transmit+0x50>
 8002230:	2302      	movs	r3, #2
 8002232:	e0cc      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d007      	beq.n	800225a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2221      	movs	r2, #33	; 0x21
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2210      	movs	r2, #16
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_I2C_Master_Transmit+0x1f8>)
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fac2 	bl	800282c <I2C_MasterRequestWrite>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08d      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c8:	e066      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6a39      	ldr	r1, [r7, #32]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fcec 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d107      	bne.n	80022f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06b      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b04      	cmp	r3, #4
 8002332:	d11b      	bne.n	800236c <HAL_I2C_Master_Transmit+0x188>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d017      	beq.n	800236c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6a39      	ldr	r1, [r7, #32]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fcdc 	bl	8002d2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e01a      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d194      	bne.n	80022ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	00100002 	.word	0x00100002
 80023dc:	ffff0000 	.word	0xffff0000

080023e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fa:	f7ff fac9 	bl	8001990 <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	f040 8208 	bne.w	800281e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	497b      	ldr	r1, [pc, #492]	; (8002604 <HAL_I2C_Mem_Read+0x224>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb71 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	e1fb      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Mem_Read+0x56>
 8002432:	2302      	movs	r3, #2
 8002434:	e1f4      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d007      	beq.n	800245c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2222      	movs	r2, #34	; 0x22
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a5b      	ldr	r2, [pc, #364]	; (8002608 <HAL_I2C_Mem_Read+0x228>)
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249e:	88f8      	ldrh	r0, [r7, #6]
 80024a0:	893a      	ldrh	r2, [r7, #8]
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fa3e 	bl	8002930 <I2C_RequestMemoryRead>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1b0      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e184      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d11b      	bne.n	800252e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e164      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	2b02      	cmp	r3, #2
 8002534:	d11b      	bne.n	800256e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002544:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	e144      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002584:	e138      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	2b03      	cmp	r3, #3
 800258c:	f200 80f1 	bhi.w	8002772 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b01      	cmp	r3, #1
 8002596:	d123      	bne.n	80025e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fc07 	bl	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e139      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025de:	e10b      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d14e      	bne.n	8002686 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	2200      	movs	r2, #0
 80025f0:	4906      	ldr	r1, [pc, #24]	; (800260c <HAL_I2C_Mem_Read+0x22c>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fa84 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e10e      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
 8002602:	bf00      	nop
 8002604:	00100002 	.word	0x00100002
 8002608:	ffff0000 	.word	0xffff0000
 800260c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002684:	e0b8      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	2200      	movs	r2, #0
 800268e:	4966      	ldr	r1, [pc, #408]	; (8002828 <HAL_I2C_Mem_Read+0x448>)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa35 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0bf      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	2200      	movs	r2, #0
 80026ea:	494f      	ldr	r1, [pc, #316]	; (8002828 <HAL_I2C_Mem_Read+0x448>)
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fa07 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e091      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002770:	e042      	b.n	80027f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fb1a 	bl	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e04c      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d118      	bne.n	80027f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f aec2 	bne.w	8002586 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	00010004 	.word	0x00010004

0800282c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	460b      	mov	r3, r1
 800283a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d006      	beq.n	8002856 <I2C_MasterRequestWrite+0x2a>
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d003      	beq.n	8002856 <I2C_MasterRequestWrite+0x2a>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002854:	d108      	bne.n	8002868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e00b      	b.n	8002880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	2b12      	cmp	r3, #18
 800286e:	d107      	bne.n	8002880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f937 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a6:	d103      	bne.n	80028b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e035      	b.n	8002920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028bc:	d108      	bne.n	80028d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028cc:	611a      	str	r2, [r3, #16]
 80028ce:	e01b      	b.n	8002908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	11db      	asrs	r3, r3, #7
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0306 	and.w	r3, r3, #6
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f063 030f 	orn	r3, r3, #15
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	490e      	ldr	r1, [pc, #56]	; (8002928 <I2C_MasterRequestWrite+0xfc>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f95d 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e010      	b.n	8002920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <I2C_MasterRequestWrite+0x100>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f94d 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	00010008 	.word	0x00010008
 800292c:	00010002 	.word	0x00010002

08002930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2200      	movs	r2, #0
 8002972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f8c2 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002990:	d103      	bne.n	800299a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0aa      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	4952      	ldr	r1, [pc, #328]	; (8002afc <I2C_RequestMemoryRead+0x1cc>)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f8fa 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e097      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f964 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d107      	bne.n	8002a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e076      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]
 8002a16:	e021      	b.n	8002a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f93e 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d107      	bne.n	8002a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e050      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a52:	893b      	ldrh	r3, [r7, #8]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	6a39      	ldr	r1, [r7, #32]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f923 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e035      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f82b 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d103      	bne.n	8002ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e013      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	6a3a      	ldr	r2, [r7, #32]
 8002ae0:	4906      	ldr	r1, [pc, #24]	; (8002afc <I2C_RequestMemoryRead+0x1cc>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f863 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010002 	.word	0x00010002

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e025      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d021      	beq.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe ff39 	bl	8001990 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d116      	bne.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e023      	b.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10d      	bne.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	e00c      	b.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d0b6      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbc:	e051      	b.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d123      	bne.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e046      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d021      	beq.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fe feb7 	bl	8001990 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e020      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10c      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e00b      	b.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d18d      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb8:	e02d      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f8ce 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02d      	b.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d021      	beq.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fe5d 	bl	8001990 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d1ca      	bne.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3a:	e02d      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f88d 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e02d      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d021      	beq.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7fe fe1c 	bl	8001990 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d1ca      	bne.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dbc:	e042      	b.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d119      	bne.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0210 	mvn.w	r2, #16
 8002dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e029      	b.n	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7fe fdc6 	bl	8001990 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d1b5      	bne.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d11b      	bne.n	8002eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e264      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d075      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	4ba3      	ldr	r3, [pc, #652]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4ba0      	ldr	r3, [pc, #640]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d112      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b9d      	ldr	r3, [pc, #628]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b99      	ldr	r3, [pc, #612]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d157      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e23f      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x74>
 8002f22:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a90      	ldr	r2, [pc, #576]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x98>
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a8a      	ldr	r2, [pc, #552]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f54:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a83      	ldr	r2, [pc, #524]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fd0c 	bl	8001990 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fd08 	bl	8001990 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e204      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fcf8 	bl	8001990 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fcf4 	bl	8001990 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1f0      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1c4      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4952      	ldr	r1, [pc, #328]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	e03a      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCC_OscConfig+0x2b0>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fcad 	bl	8001990 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe fca9 	bl	8001990 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1a5      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4940      	ldr	r1, [pc, #256]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x2b0>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fc8c 	bl	8001990 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe fc88 	bl	8001990 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e184      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d030      	beq.n	8003108 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCC_OscConfig+0x2b4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe fc6c 	bl	8001990 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe fc68 	bl	8001990 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e164      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x200>
 80030da:	e015      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x2b4>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fc55 	bl	8001990 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe fc51 	bl	8001990 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e14d      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a0 	beq.w	8003256 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d121      	bne.n	8003196 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fc17 	bl	8001990 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e011      	b.n	800318a <HAL_RCC_OscConfig+0x2ce>
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
 8003174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe fc0a 	bl	8001990 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e106      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <HAL_RCC_OscConfig+0x4e4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x2f0>
 800319e:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a80      	ldr	r2, [pc, #512]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x32a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x312>
 80031b4:	4b7b      	ldr	r3, [pc, #492]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a7a      	ldr	r2, [pc, #488]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a77      	ldr	r2, [pc, #476]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x32a>
 80031ce:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a74      	ldr	r2, [pc, #464]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a71      	ldr	r2, [pc, #452]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe fbcf 	bl	8001990 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fbcb 	bl	8001990 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0c5      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x33a>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fbb9 	bl	8001990 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fbb5 	bl	8001990 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0af      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a55      	ldr	r2, [pc, #340]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 809b 	beq.w	8003396 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d05c      	beq.n	8003326 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d141      	bne.n	80032f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fb89 	bl	8001990 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fb85 	bl	8001990 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e081      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	019b      	lsls	r3, r3, #6
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	4937      	ldr	r1, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fb5e 	bl	8001990 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fb5a 	bl	8001990 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e056      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x41c>
 80032f6:	e04e      	b.n	8003396 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fb47 	bl	8001990 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fb43 	bl	8001990 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e03f      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x44a>
 8003324:	e037      	b.n	8003396 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e032      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d028      	beq.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d121      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d11a      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003368:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336a:	4293      	cmp	r3, r2
 800336c:	d111      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d107      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40007000 	.word	0x40007000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470060 	.word	0x42470060

080033ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0cc      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d90c      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b65      	ldr	r3, [pc, #404]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b63      	ldr	r3, [pc, #396]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0b8      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003400:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800340a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	494d      	ldr	r1, [pc, #308]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d044      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d119      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d003      	beq.n	800346a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	2b03      	cmp	r3, #3
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e067      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4934      	ldr	r1, [pc, #208]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe fa78 	bl	8001990 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe fa74 	bl	8001990 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e04f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d20c      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e032      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4916      	ldr	r1, [pc, #88]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	490e      	ldr	r1, [pc, #56]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003532:	f000 f821 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	490a      	ldr	r1, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe f9d8 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023c00 	.word	0x40023c00
 8003568:	40023800 	.word	0x40023800
 800356c:	08015480 	.word	0x08015480
 8003570:	20000000 	.word	0x20000000
 8003574:	20000004 	.word	0x20000004

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	2300      	movs	r3, #0
 800358a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003590:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d00d      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x40>
 800359c:	2b08      	cmp	r3, #8
 800359e:	f200 80bd 	bhi.w	800371c <HAL_RCC_GetSysClockFreq+0x1a4>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x34>
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035aa:	e0b7      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ae:	60bb      	str	r3, [r7, #8]
       break;
 80035b0:	e0b7      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035b4:	60bb      	str	r3, [r7, #8]
      break;
 80035b6:	e0b4      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d04d      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	461a      	mov	r2, r3
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	ea02 0800 	and.w	r8, r2, r0
 80035e6:	ea03 0901 	and.w	r9, r3, r1
 80035ea:	4640      	mov	r0, r8
 80035ec:	4649      	mov	r1, r9
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	014b      	lsls	r3, r1, #5
 80035f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035fc:	0142      	lsls	r2, r0, #5
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	ebb0 0008 	subs.w	r0, r0, r8
 8003606:	eb61 0109 	sbc.w	r1, r1, r9
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	018b      	lsls	r3, r1, #6
 8003614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003618:	0182      	lsls	r2, r0, #6
 800361a:	1a12      	subs	r2, r2, r0
 800361c:	eb63 0301 	sbc.w	r3, r3, r1
 8003620:	f04f 0000 	mov.w	r0, #0
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	00d9      	lsls	r1, r3, #3
 800362a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800362e:	00d0      	lsls	r0, r2, #3
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	eb12 0208 	adds.w	r2, r2, r8
 8003638:	eb43 0309 	adc.w	r3, r3, r9
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	0259      	lsls	r1, r3, #9
 8003646:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800364a:	0250      	lsls	r0, r2, #9
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f7fd f94e 	bl	80008fc <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e04a      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	461a      	mov	r2, r3
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	ea02 0400 	and.w	r4, r2, r0
 8003682:	ea03 0501 	and.w	r5, r3, r1
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	014b      	lsls	r3, r1, #5
 8003694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003698:	0142      	lsls	r2, r0, #5
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	1b00      	subs	r0, r0, r4
 80036a0:	eb61 0105 	sbc.w	r1, r1, r5
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	018b      	lsls	r3, r1, #6
 80036ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036b2:	0182      	lsls	r2, r0, #6
 80036b4:	1a12      	subs	r2, r2, r0
 80036b6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	00d9      	lsls	r1, r3, #3
 80036c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c8:	00d0      	lsls	r0, r2, #3
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	1912      	adds	r2, r2, r4
 80036d0:	eb45 0303 	adc.w	r3, r5, r3
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	0299      	lsls	r1, r3, #10
 80036de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036e2:	0290      	lsls	r0, r2, #10
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	f7fd f902 	bl	80008fc <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800371e:	60bb      	str	r3, [r7, #8]
      break;
 8003720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003722:	68bb      	ldr	r3, [r7, #8]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400
 8003738:	007a1200 	.word	0x007a1200

0800373c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000000 	.word	0x20000000

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a9b      	lsrs	r3, r3, #10
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	08015490 	.word	0x08015490

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003780:	f7ff ffdc 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	08015490 	.word	0x08015490

080037a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e041      	b.n	800383a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd ff3e 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f000 fac0 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e041      	b.n	80038d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f839 	bl	80038e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f000 fa71 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start+0x24>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e022      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d109      	bne.n	8003932 <HAL_TIM_PWM_Start+0x3e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e015      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <HAL_TIM_PWM_Start+0x58>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e068      	b.n	8003a38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_TIM_PWM_Start+0x82>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003974:	e013      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x92>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003984:	e00b      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	e003      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc84 	bl	80042b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <HAL_TIM_PWM_Start+0x14c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_TIM_PWM_Start+0x14c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d013      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_TIM_PWM_Start+0x150>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <HAL_TIM_PWM_Start+0x154>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_TIM_PWM_Start+0x158>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <HAL_TIM_PWM_Start+0x15c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d111      	bne.n	8003a26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d010      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a24:	e007      	b.n	8003a36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40014000 	.word	0x40014000

08003a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e0ae      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b0c      	cmp	r3, #12
 8003a7e:	f200 809f 	bhi.w	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003abd 	.word	0x08003abd
 8003a8c:	08003bc1 	.word	0x08003bc1
 8003a90:	08003bc1 	.word	0x08003bc1
 8003a94:	08003bc1 	.word	0x08003bc1
 8003a98:	08003afd 	.word	0x08003afd
 8003a9c:	08003bc1 	.word	0x08003bc1
 8003aa0:	08003bc1 	.word	0x08003bc1
 8003aa4:	08003bc1 	.word	0x08003bc1
 8003aa8:	08003b3f 	.word	0x08003b3f
 8003aac:	08003bc1 	.word	0x08003bc1
 8003ab0:	08003bc1 	.word	0x08003bc1
 8003ab4:	08003bc1 	.word	0x08003bc1
 8003ab8:	08003b7f 	.word	0x08003b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f9d0 	bl	8003e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0204 	bic.w	r2, r2, #4
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	619a      	str	r2, [r3, #24]
      break;
 8003afa:	e064      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fa16 	bl	8003f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6999      	ldr	r1, [r3, #24]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	619a      	str	r2, [r3, #24]
      break;
 8003b3c:	e043      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fa61 	bl	800400c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0208 	orr.w	r2, r2, #8
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0204 	bic.w	r2, r2, #4
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	61da      	str	r2, [r3, #28]
      break;
 8003b7c:	e023      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 faab 	bl	80040e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69d9      	ldr	r1, [r3, #28]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	61da      	str	r2, [r3, #28]
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0b4      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x186>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2c:	d03e      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0xd4>
 8003c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c32:	f200 8087 	bhi.w	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	f000 8086 	beq.w	8003d4a <HAL_TIM_ConfigClockSource+0x172>
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d87f      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b70      	cmp	r3, #112	; 0x70
 8003c46:	d01a      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0xa6>
 8003c48:	2b70      	cmp	r3, #112	; 0x70
 8003c4a:	d87b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4c:	2b60      	cmp	r3, #96	; 0x60
 8003c4e:	d050      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d877      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c54:	2b50      	cmp	r3, #80	; 0x50
 8003c56:	d03c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d873      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d058      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x13a>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d86f      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b30      	cmp	r3, #48	; 0x30
 8003c66:	d064      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d86b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d060      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d867      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d05a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	e062      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f000 faf1 	bl	8004274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
      break;
 8003caa:	e04f      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f000 fada 	bl	8004274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e03c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 fa4e 	bl	8004180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2150      	movs	r1, #80	; 0x50
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 faa7 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e02c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f000 fa6d 	bl	80041de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2160      	movs	r1, #96	; 0x60
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fa97 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003d10:	e01c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f000 fa2e 	bl	8004180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fa87 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003d30:	e00c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 fa7e 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003d42:	e003      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e000      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <TIM_Base_SetConfig+0xe4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00f      	beq.n	8003da0 <TIM_Base_SetConfig+0x38>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x38>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a31      	ldr	r2, [pc, #196]	; (8003e50 <TIM_Base_SetConfig+0xe8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x38>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <TIM_Base_SetConfig+0xec>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x38>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a2f      	ldr	r2, [pc, #188]	; (8003e58 <TIM_Base_SetConfig+0xf0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <TIM_Base_SetConfig+0xe4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01b      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d017      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <TIM_Base_SetConfig+0xe8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <TIM_Base_SetConfig+0xec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00f      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <TIM_Base_SetConfig+0xf0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <TIM_Base_SetConfig+0xf4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <TIM_Base_SetConfig+0xf8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_Base_SetConfig+0x8a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <TIM_Base_SetConfig+0xfc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <TIM_Base_SetConfig+0xe4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d103      	bne.n	8003e38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40000c00 	.word	0x40000c00
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800

08003e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0201 	bic.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0302 	bic.w	r3, r3, #2
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <TIM_OC1_SetConfig+0xc8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10c      	bne.n	8003ede <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0308 	bic.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <TIM_OC1_SetConfig+0xc8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d111      	bne.n	8003f0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40010000 	.word	0x40010000

08003f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0210 	bic.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0320 	bic.w	r3, r3, #32
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <TIM_OC2_SetConfig+0xd4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d10d      	bne.n	8003fb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <TIM_OC2_SetConfig+0xd4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d113      	bne.n	8003fe0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000

0800400c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <TIM_OC3_SetConfig+0xd0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10d      	bne.n	8004086 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <TIM_OC3_SetConfig+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40010000 	.word	0x40010000

080040e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800412a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <TIM_OC4_SetConfig+0x9c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000

08004180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 030a 	bic.w	r3, r3, #10
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041de:	b480      	push	{r7}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	f043 0307 	orr.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	431a      	orrs	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	609a      	str	r2, [r3, #8]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e050      	b.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004364:	d013      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10c      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4313      	orrs	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40014000 	.word	0x40014000

080043dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e03f      	b.n	800446e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd f97a 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2224      	movs	r2, #36	; 0x24
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800441e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f929 	bl	8004678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b08a      	sub	sp, #40	; 0x28
 800447a:	af02      	add	r7, sp, #8
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b20      	cmp	r3, #32
 8004494:	d17c      	bne.n	8004590 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_Transmit+0x2c>
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e075      	b.n	8004592 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_UART_Transmit+0x3e>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e06e      	b.n	8004592 <HAL_UART_Transmit+0x11c>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2221      	movs	r2, #33	; 0x21
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ca:	f7fd fa61 	bl	8001990 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e4:	d108      	bne.n	80044f8 <HAL_UART_Transmit+0x82>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e003      	b.n	8004500 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004508:	e02a      	b.n	8004560 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f840 	bl	800459a <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e036      	b.n	8004592 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	3302      	adds	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e007      	b.n	8004552 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3301      	adds	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1cf      	bne.n	800450a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	2140      	movs	r1, #64	; 0x40
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f810 	bl	800459a <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e006      	b.n	8004592 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b090      	sub	sp, #64	; 0x40
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	e050      	b.n	800464e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d04c      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0x30>
 80045ba:	f7fd f9e9 	bl	8001990 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d241      	bcs.n	800464e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ea:	637a      	str	r2, [r7, #52]	; 0x34
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	613b      	str	r3, [r7, #16]
   return(result);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461e:	623a      	str	r2, [r7, #32]
 8004620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	69f9      	ldr	r1, [r7, #28]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	61bb      	str	r3, [r7, #24]
   return(result);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e5      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e00f      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	429a      	cmp	r2, r3
 800466a:	d09f      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3740      	adds	r7, #64	; 0x40
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	b09f      	sub	sp, #124	; 0x7c
 800467e:	af00      	add	r7, sp, #0
 8004680:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800468c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468e:	68d9      	ldr	r1, [r3, #12]
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	ea40 0301 	orr.w	r3, r0, r1
 8004698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800469a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046bc:	f021 010c 	bic.w	r1, r1, #12
 80046c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c6:	430b      	orrs	r3, r1
 80046c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	6999      	ldr	r1, [r3, #24]
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	ea40 0301 	orr.w	r3, r0, r1
 80046e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4bc5      	ldr	r3, [pc, #788]	; (80049fc <UART_SetConfig+0x384>)
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d004      	beq.n	80046f6 <UART_SetConfig+0x7e>
 80046ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4bc3      	ldr	r3, [pc, #780]	; (8004a00 <UART_SetConfig+0x388>)
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d103      	bne.n	80046fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046f6:	f7ff f841 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 80046fa:	6778      	str	r0, [r7, #116]	; 0x74
 80046fc:	e002      	b.n	8004704 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046fe:	f7ff f829 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8004702:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470c:	f040 80b6 	bne.w	800487c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004712:	461c      	mov	r4, r3
 8004714:	f04f 0500 	mov.w	r5, #0
 8004718:	4622      	mov	r2, r4
 800471a:	462b      	mov	r3, r5
 800471c:	1891      	adds	r1, r2, r2
 800471e:	6439      	str	r1, [r7, #64]	; 0x40
 8004720:	415b      	adcs	r3, r3
 8004722:	647b      	str	r3, [r7, #68]	; 0x44
 8004724:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004728:	1912      	adds	r2, r2, r4
 800472a:	eb45 0303 	adc.w	r3, r5, r3
 800472e:	f04f 0000 	mov.w	r0, #0
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	00d9      	lsls	r1, r3, #3
 8004738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800473c:	00d0      	lsls	r0, r2, #3
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	1911      	adds	r1, r2, r4
 8004744:	6639      	str	r1, [r7, #96]	; 0x60
 8004746:	416b      	adcs	r3, r5
 8004748:	667b      	str	r3, [r7, #100]	; 0x64
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	461a      	mov	r2, r3
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	1891      	adds	r1, r2, r2
 8004756:	63b9      	str	r1, [r7, #56]	; 0x38
 8004758:	415b      	adcs	r3, r3
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004760:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004764:	f7fc f8ca 	bl	80008fc <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4ba5      	ldr	r3, [pc, #660]	; (8004a04 <UART_SetConfig+0x38c>)
 800476e:	fba3 2302 	umull	r2, r3, r3, r2
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	011e      	lsls	r6, r3, #4
 8004776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004778:	461c      	mov	r4, r3
 800477a:	f04f 0500 	mov.w	r5, #0
 800477e:	4622      	mov	r2, r4
 8004780:	462b      	mov	r3, r5
 8004782:	1891      	adds	r1, r2, r2
 8004784:	6339      	str	r1, [r7, #48]	; 0x30
 8004786:	415b      	adcs	r3, r3
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
 800478a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800478e:	1912      	adds	r2, r2, r4
 8004790:	eb45 0303 	adc.w	r3, r5, r3
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	00d9      	lsls	r1, r3, #3
 800479e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a2:	00d0      	lsls	r0, r2, #3
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	1911      	adds	r1, r2, r4
 80047aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80047ac:	416b      	adcs	r3, r5
 80047ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	1891      	adds	r1, r2, r2
 80047bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80047be:	415b      	adcs	r3, r3
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047ca:	f7fc f897 	bl	80008fc <__aeabi_uldivmod>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4b8c      	ldr	r3, [pc, #560]	; (8004a04 <UART_SetConfig+0x38c>)
 80047d4:	fba3 1302 	umull	r1, r3, r3, r2
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	2164      	movs	r1, #100	; 0x64
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	3332      	adds	r3, #50	; 0x32
 80047e6:	4a87      	ldr	r2, [pc, #540]	; (8004a04 <UART_SetConfig+0x38c>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047f4:	441e      	add	r6, r3
 80047f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f8:	4618      	mov	r0, r3
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	1894      	adds	r4, r2, r2
 8004804:	623c      	str	r4, [r7, #32]
 8004806:	415b      	adcs	r3, r3
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800480e:	1812      	adds	r2, r2, r0
 8004810:	eb41 0303 	adc.w	r3, r1, r3
 8004814:	f04f 0400 	mov.w	r4, #0
 8004818:	f04f 0500 	mov.w	r5, #0
 800481c:	00dd      	lsls	r5, r3, #3
 800481e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004822:	00d4      	lsls	r4, r2, #3
 8004824:	4622      	mov	r2, r4
 8004826:	462b      	mov	r3, r5
 8004828:	1814      	adds	r4, r2, r0
 800482a:	653c      	str	r4, [r7, #80]	; 0x50
 800482c:	414b      	adcs	r3, r1
 800482e:	657b      	str	r3, [r7, #84]	; 0x54
 8004830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	461a      	mov	r2, r3
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	1891      	adds	r1, r2, r2
 800483c:	61b9      	str	r1, [r7, #24]
 800483e:	415b      	adcs	r3, r3
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004846:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800484a:	f7fc f857 	bl	80008fc <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4b6c      	ldr	r3, [pc, #432]	; (8004a04 <UART_SetConfig+0x38c>)
 8004854:	fba3 1302 	umull	r1, r3, r3, r2
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	2164      	movs	r1, #100	; 0x64
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	3332      	adds	r3, #50	; 0x32
 8004866:	4a67      	ldr	r2, [pc, #412]	; (8004a04 <UART_SetConfig+0x38c>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	f003 0207 	and.w	r2, r3, #7
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4432      	add	r2, r6
 8004878:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800487a:	e0b9      	b.n	80049f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800487c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487e:	461c      	mov	r4, r3
 8004880:	f04f 0500 	mov.w	r5, #0
 8004884:	4622      	mov	r2, r4
 8004886:	462b      	mov	r3, r5
 8004888:	1891      	adds	r1, r2, r2
 800488a:	6139      	str	r1, [r7, #16]
 800488c:	415b      	adcs	r3, r3
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004894:	1912      	adds	r2, r2, r4
 8004896:	eb45 0303 	adc.w	r3, r5, r3
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	00d9      	lsls	r1, r3, #3
 80048a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048a8:	00d0      	lsls	r0, r2, #3
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	eb12 0804 	adds.w	r8, r2, r4
 80048b2:	eb43 0905 	adc.w	r9, r3, r5
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	008b      	lsls	r3, r1, #2
 80048ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048ce:	0082      	lsls	r2, r0, #2
 80048d0:	4640      	mov	r0, r8
 80048d2:	4649      	mov	r1, r9
 80048d4:	f7fc f812 	bl	80008fc <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4b49      	ldr	r3, [pc, #292]	; (8004a04 <UART_SetConfig+0x38c>)
 80048de:	fba3 2302 	umull	r2, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	011e      	lsls	r6, r3, #4
 80048e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e8:	4618      	mov	r0, r3
 80048ea:	f04f 0100 	mov.w	r1, #0
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	1894      	adds	r4, r2, r2
 80048f4:	60bc      	str	r4, [r7, #8]
 80048f6:	415b      	adcs	r3, r3
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048fe:	1812      	adds	r2, r2, r0
 8004900:	eb41 0303 	adc.w	r3, r1, r3
 8004904:	f04f 0400 	mov.w	r4, #0
 8004908:	f04f 0500 	mov.w	r5, #0
 800490c:	00dd      	lsls	r5, r3, #3
 800490e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004912:	00d4      	lsls	r4, r2, #3
 8004914:	4622      	mov	r2, r4
 8004916:	462b      	mov	r3, r5
 8004918:	1814      	adds	r4, r2, r0
 800491a:	64bc      	str	r4, [r7, #72]	; 0x48
 800491c:	414b      	adcs	r3, r1
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4618      	mov	r0, r3
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	008b      	lsls	r3, r1, #2
 8004934:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004938:	0082      	lsls	r2, r0, #2
 800493a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800493e:	f7fb ffdd 	bl	80008fc <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <UART_SetConfig+0x38c>)
 8004948:	fba3 1302 	umull	r1, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	2164      	movs	r1, #100	; 0x64
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	3332      	adds	r3, #50	; 0x32
 800495a:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <UART_SetConfig+0x38c>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004966:	441e      	add	r6, r3
 8004968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496a:	4618      	mov	r0, r3
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	1894      	adds	r4, r2, r2
 8004976:	603c      	str	r4, [r7, #0]
 8004978:	415b      	adcs	r3, r3
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004980:	1812      	adds	r2, r2, r0
 8004982:	eb41 0303 	adc.w	r3, r1, r3
 8004986:	f04f 0400 	mov.w	r4, #0
 800498a:	f04f 0500 	mov.w	r5, #0
 800498e:	00dd      	lsls	r5, r3, #3
 8004990:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004994:	00d4      	lsls	r4, r2, #3
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	eb12 0a00 	adds.w	sl, r2, r0
 800499e:	eb43 0b01 	adc.w	fp, r3, r1
 80049a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f04f 0100 	mov.w	r1, #0
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	008b      	lsls	r3, r1, #2
 80049b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049ba:	0082      	lsls	r2, r0, #2
 80049bc:	4650      	mov	r0, sl
 80049be:	4659      	mov	r1, fp
 80049c0:	f7fb ff9c 	bl	80008fc <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <UART_SetConfig+0x38c>)
 80049ca:	fba3 1302 	umull	r1, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2164      	movs	r1, #100	; 0x64
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	3332      	adds	r3, #50	; 0x32
 80049dc:	4a09      	ldr	r2, [pc, #36]	; (8004a04 <UART_SetConfig+0x38c>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	f003 020f 	and.w	r2, r3, #15
 80049e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4432      	add	r2, r6
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	377c      	adds	r7, #124	; 0x7c
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fa:	bf00      	nop
 80049fc:	40011000 	.word	0x40011000
 8004a00:	40011400 	.word	0x40011400
 8004a04:	51eb851f 	.word	0x51eb851f

08004a08 <__errno>:
 8004a08:	4b01      	ldr	r3, [pc, #4]	; (8004a10 <__errno+0x8>)
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <__libc_init_array>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	4d0d      	ldr	r5, [pc, #52]	; (8004a4c <__libc_init_array+0x38>)
 8004a18:	4c0d      	ldr	r4, [pc, #52]	; (8004a50 <__libc_init_array+0x3c>)
 8004a1a:	1b64      	subs	r4, r4, r5
 8004a1c:	10a4      	asrs	r4, r4, #2
 8004a1e:	2600      	movs	r6, #0
 8004a20:	42a6      	cmp	r6, r4
 8004a22:	d109      	bne.n	8004a38 <__libc_init_array+0x24>
 8004a24:	4d0b      	ldr	r5, [pc, #44]	; (8004a54 <__libc_init_array+0x40>)
 8004a26:	4c0c      	ldr	r4, [pc, #48]	; (8004a58 <__libc_init_array+0x44>)
 8004a28:	f000 fc4e 	bl	80052c8 <_init>
 8004a2c:	1b64      	subs	r4, r4, r5
 8004a2e:	10a4      	asrs	r4, r4, #2
 8004a30:	2600      	movs	r6, #0
 8004a32:	42a6      	cmp	r6, r4
 8004a34:	d105      	bne.n	8004a42 <__libc_init_array+0x2e>
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3c:	4798      	blx	r3
 8004a3e:	3601      	adds	r6, #1
 8004a40:	e7ee      	b.n	8004a20 <__libc_init_array+0xc>
 8004a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a46:	4798      	blx	r3
 8004a48:	3601      	adds	r6, #1
 8004a4a:	e7f2      	b.n	8004a32 <__libc_init_array+0x1e>
 8004a4c:	080154d4 	.word	0x080154d4
 8004a50:	080154d4 	.word	0x080154d4
 8004a54:	080154d4 	.word	0x080154d4
 8004a58:	080154d8 	.word	0x080154d8

08004a5c <memset>:
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d100      	bne.n	8004a66 <memset+0xa>
 8004a64:	4770      	bx	lr
 8004a66:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6a:	e7f9      	b.n	8004a60 <memset+0x4>

08004a6c <siprintf>:
 8004a6c:	b40e      	push	{r1, r2, r3}
 8004a6e:	b500      	push	{lr}
 8004a70:	b09c      	sub	sp, #112	; 0x70
 8004a72:	ab1d      	add	r3, sp, #116	; 0x74
 8004a74:	9002      	str	r0, [sp, #8]
 8004a76:	9006      	str	r0, [sp, #24]
 8004a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a7c:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <siprintf+0x38>)
 8004a7e:	9107      	str	r1, [sp, #28]
 8004a80:	9104      	str	r1, [sp, #16]
 8004a82:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <siprintf+0x3c>)
 8004a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a88:	9105      	str	r1, [sp, #20]
 8004a8a:	6800      	ldr	r0, [r0, #0]
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	a902      	add	r1, sp, #8
 8004a90:	f000 f868 	bl	8004b64 <_svfiprintf_r>
 8004a94:	9b02      	ldr	r3, [sp, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	b01c      	add	sp, #112	; 0x70
 8004a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aa0:	b003      	add	sp, #12
 8004aa2:	4770      	bx	lr
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	ffff0208 	.word	0xffff0208

08004aac <__ssputs_r>:
 8004aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	688e      	ldr	r6, [r1, #8]
 8004ab2:	429e      	cmp	r6, r3
 8004ab4:	4682      	mov	sl, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4690      	mov	r8, r2
 8004aba:	461f      	mov	r7, r3
 8004abc:	d838      	bhi.n	8004b30 <__ssputs_r+0x84>
 8004abe:	898a      	ldrh	r2, [r1, #12]
 8004ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ac4:	d032      	beq.n	8004b2c <__ssputs_r+0x80>
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	6909      	ldr	r1, [r1, #16]
 8004aca:	eba5 0901 	sub.w	r9, r5, r1
 8004ace:	6965      	ldr	r5, [r4, #20]
 8004ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ad8:	3301      	adds	r3, #1
 8004ada:	444b      	add	r3, r9
 8004adc:	106d      	asrs	r5, r5, #1
 8004ade:	429d      	cmp	r5, r3
 8004ae0:	bf38      	it	cc
 8004ae2:	461d      	movcc	r5, r3
 8004ae4:	0553      	lsls	r3, r2, #21
 8004ae6:	d531      	bpl.n	8004b4c <__ssputs_r+0xa0>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f000 fb47 	bl	800517c <_malloc_r>
 8004aee:	4606      	mov	r6, r0
 8004af0:	b950      	cbnz	r0, 8004b08 <__ssputs_r+0x5c>
 8004af2:	230c      	movs	r3, #12
 8004af4:	f8ca 3000 	str.w	r3, [sl]
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b08:	6921      	ldr	r1, [r4, #16]
 8004b0a:	464a      	mov	r2, r9
 8004b0c:	f000 fabe 	bl	800508c <memcpy>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	6126      	str	r6, [r4, #16]
 8004b1e:	6165      	str	r5, [r4, #20]
 8004b20:	444e      	add	r6, r9
 8004b22:	eba5 0509 	sub.w	r5, r5, r9
 8004b26:	6026      	str	r6, [r4, #0]
 8004b28:	60a5      	str	r5, [r4, #8]
 8004b2a:	463e      	mov	r6, r7
 8004b2c:	42be      	cmp	r6, r7
 8004b2e:	d900      	bls.n	8004b32 <__ssputs_r+0x86>
 8004b30:	463e      	mov	r6, r7
 8004b32:	4632      	mov	r2, r6
 8004b34:	6820      	ldr	r0, [r4, #0]
 8004b36:	4641      	mov	r1, r8
 8004b38:	f000 fab6 	bl	80050a8 <memmove>
 8004b3c:	68a3      	ldr	r3, [r4, #8]
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	1b9b      	subs	r3, r3, r6
 8004b42:	4432      	add	r2, r6
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e7db      	b.n	8004b04 <__ssputs_r+0x58>
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	f000 fb6f 	bl	8005230 <_realloc_r>
 8004b52:	4606      	mov	r6, r0
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d1e1      	bne.n	8004b1c <__ssputs_r+0x70>
 8004b58:	6921      	ldr	r1, [r4, #16]
 8004b5a:	4650      	mov	r0, sl
 8004b5c:	f000 fabe 	bl	80050dc <_free_r>
 8004b60:	e7c7      	b.n	8004af2 <__ssputs_r+0x46>
	...

08004b64 <_svfiprintf_r>:
 8004b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	4698      	mov	r8, r3
 8004b6a:	898b      	ldrh	r3, [r1, #12]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	b09d      	sub	sp, #116	; 0x74
 8004b70:	4607      	mov	r7, r0
 8004b72:	460d      	mov	r5, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	d50e      	bpl.n	8004b96 <_svfiprintf_r+0x32>
 8004b78:	690b      	ldr	r3, [r1, #16]
 8004b7a:	b963      	cbnz	r3, 8004b96 <_svfiprintf_r+0x32>
 8004b7c:	2140      	movs	r1, #64	; 0x40
 8004b7e:	f000 fafd 	bl	800517c <_malloc_r>
 8004b82:	6028      	str	r0, [r5, #0]
 8004b84:	6128      	str	r0, [r5, #16]
 8004b86:	b920      	cbnz	r0, 8004b92 <_svfiprintf_r+0x2e>
 8004b88:	230c      	movs	r3, #12
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	e0d1      	b.n	8004d36 <_svfiprintf_r+0x1d2>
 8004b92:	2340      	movs	r3, #64	; 0x40
 8004b94:	616b      	str	r3, [r5, #20]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ba4:	2330      	movs	r3, #48	; 0x30
 8004ba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d50 <_svfiprintf_r+0x1ec>
 8004baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bae:	f04f 0901 	mov.w	r9, #1
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	469a      	mov	sl, r3
 8004bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bba:	b10a      	cbz	r2, 8004bc0 <_svfiprintf_r+0x5c>
 8004bbc:	2a25      	cmp	r2, #37	; 0x25
 8004bbe:	d1f9      	bne.n	8004bb4 <_svfiprintf_r+0x50>
 8004bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bc4:	d00b      	beq.n	8004bde <_svfiprintf_r+0x7a>
 8004bc6:	465b      	mov	r3, fp
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ff6d 	bl	8004aac <__ssputs_r>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f000 80aa 	beq.w	8004d2c <_svfiprintf_r+0x1c8>
 8004bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bda:	445a      	add	r2, fp
 8004bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bde:	f89a 3000 	ldrb.w	r3, [sl]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80a2 	beq.w	8004d2c <_svfiprintf_r+0x1c8>
 8004be8:	2300      	movs	r3, #0
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bf2:	f10a 0a01 	add.w	sl, sl, #1
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	9307      	str	r3, [sp, #28]
 8004bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8004c00:	4654      	mov	r4, sl
 8004c02:	2205      	movs	r2, #5
 8004c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c08:	4851      	ldr	r0, [pc, #324]	; (8004d50 <_svfiprintf_r+0x1ec>)
 8004c0a:	f7fb faf1 	bl	80001f0 <memchr>
 8004c0e:	9a04      	ldr	r2, [sp, #16]
 8004c10:	b9d8      	cbnz	r0, 8004c4a <_svfiprintf_r+0xe6>
 8004c12:	06d0      	lsls	r0, r2, #27
 8004c14:	bf44      	itt	mi
 8004c16:	2320      	movmi	r3, #32
 8004c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c1c:	0711      	lsls	r1, r2, #28
 8004c1e:	bf44      	itt	mi
 8004c20:	232b      	movmi	r3, #43	; 0x2b
 8004c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c26:	f89a 3000 	ldrb.w	r3, [sl]
 8004c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2c:	d015      	beq.n	8004c5a <_svfiprintf_r+0xf6>
 8004c2e:	9a07      	ldr	r2, [sp, #28]
 8004c30:	4654      	mov	r4, sl
 8004c32:	2000      	movs	r0, #0
 8004c34:	f04f 0c0a 	mov.w	ip, #10
 8004c38:	4621      	mov	r1, r4
 8004c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c3e:	3b30      	subs	r3, #48	; 0x30
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	d94e      	bls.n	8004ce2 <_svfiprintf_r+0x17e>
 8004c44:	b1b0      	cbz	r0, 8004c74 <_svfiprintf_r+0x110>
 8004c46:	9207      	str	r2, [sp, #28]
 8004c48:	e014      	b.n	8004c74 <_svfiprintf_r+0x110>
 8004c4a:	eba0 0308 	sub.w	r3, r0, r8
 8004c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	46a2      	mov	sl, r4
 8004c58:	e7d2      	b.n	8004c00 <_svfiprintf_r+0x9c>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	1d19      	adds	r1, r3, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	9103      	str	r1, [sp, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfbb      	ittet	lt
 8004c66:	425b      	neglt	r3, r3
 8004c68:	f042 0202 	orrlt.w	r2, r2, #2
 8004c6c:	9307      	strge	r3, [sp, #28]
 8004c6e:	9307      	strlt	r3, [sp, #28]
 8004c70:	bfb8      	it	lt
 8004c72:	9204      	strlt	r2, [sp, #16]
 8004c74:	7823      	ldrb	r3, [r4, #0]
 8004c76:	2b2e      	cmp	r3, #46	; 0x2e
 8004c78:	d10c      	bne.n	8004c94 <_svfiprintf_r+0x130>
 8004c7a:	7863      	ldrb	r3, [r4, #1]
 8004c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c7e:	d135      	bne.n	8004cec <_svfiprintf_r+0x188>
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	1d1a      	adds	r2, r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	9203      	str	r2, [sp, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bfb8      	it	lt
 8004c8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c90:	3402      	adds	r4, #2
 8004c92:	9305      	str	r3, [sp, #20]
 8004c94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d60 <_svfiprintf_r+0x1fc>
 8004c98:	7821      	ldrb	r1, [r4, #0]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	f7fb faa7 	bl	80001f0 <memchr>
 8004ca2:	b140      	cbz	r0, 8004cb6 <_svfiprintf_r+0x152>
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	eba0 000a 	sub.w	r0, r0, sl
 8004caa:	fa03 f000 	lsl.w	r0, r3, r0
 8004cae:	9b04      	ldr	r3, [sp, #16]
 8004cb0:	4303      	orrs	r3, r0
 8004cb2:	3401      	adds	r4, #1
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cba:	4826      	ldr	r0, [pc, #152]	; (8004d54 <_svfiprintf_r+0x1f0>)
 8004cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cc0:	2206      	movs	r2, #6
 8004cc2:	f7fb fa95 	bl	80001f0 <memchr>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d038      	beq.n	8004d3c <_svfiprintf_r+0x1d8>
 8004cca:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <_svfiprintf_r+0x1f4>)
 8004ccc:	bb1b      	cbnz	r3, 8004d16 <_svfiprintf_r+0x1b2>
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	9303      	str	r3, [sp, #12]
 8004cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cdc:	4433      	add	r3, r6
 8004cde:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce0:	e767      	b.n	8004bb2 <_svfiprintf_r+0x4e>
 8004ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	2001      	movs	r0, #1
 8004cea:	e7a5      	b.n	8004c38 <_svfiprintf_r+0xd4>
 8004cec:	2300      	movs	r3, #0
 8004cee:	3401      	adds	r4, #1
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f04f 0c0a 	mov.w	ip, #10
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cfe:	3a30      	subs	r2, #48	; 0x30
 8004d00:	2a09      	cmp	r2, #9
 8004d02:	d903      	bls.n	8004d0c <_svfiprintf_r+0x1a8>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0c5      	beq.n	8004c94 <_svfiprintf_r+0x130>
 8004d08:	9105      	str	r1, [sp, #20]
 8004d0a:	e7c3      	b.n	8004c94 <_svfiprintf_r+0x130>
 8004d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d10:	4604      	mov	r4, r0
 8004d12:	2301      	movs	r3, #1
 8004d14:	e7f0      	b.n	8004cf8 <_svfiprintf_r+0x194>
 8004d16:	ab03      	add	r3, sp, #12
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <_svfiprintf_r+0x1f8>)
 8004d1e:	a904      	add	r1, sp, #16
 8004d20:	4638      	mov	r0, r7
 8004d22:	f3af 8000 	nop.w
 8004d26:	1c42      	adds	r2, r0, #1
 8004d28:	4606      	mov	r6, r0
 8004d2a:	d1d6      	bne.n	8004cda <_svfiprintf_r+0x176>
 8004d2c:	89ab      	ldrh	r3, [r5, #12]
 8004d2e:	065b      	lsls	r3, r3, #25
 8004d30:	f53f af2c 	bmi.w	8004b8c <_svfiprintf_r+0x28>
 8004d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d36:	b01d      	add	sp, #116	; 0x74
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	ab03      	add	r3, sp, #12
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	462a      	mov	r2, r5
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <_svfiprintf_r+0x1f8>)
 8004d44:	a904      	add	r1, sp, #16
 8004d46:	4638      	mov	r0, r7
 8004d48:	f000 f87a 	bl	8004e40 <_printf_i>
 8004d4c:	e7eb      	b.n	8004d26 <_svfiprintf_r+0x1c2>
 8004d4e:	bf00      	nop
 8004d50:	08015498 	.word	0x08015498
 8004d54:	080154a2 	.word	0x080154a2
 8004d58:	00000000 	.word	0x00000000
 8004d5c:	08004aad 	.word	0x08004aad
 8004d60:	0801549e 	.word	0x0801549e

08004d64 <_printf_common>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	4616      	mov	r6, r2
 8004d6a:	4699      	mov	r9, r3
 8004d6c:	688a      	ldr	r2, [r1, #8]
 8004d6e:	690b      	ldr	r3, [r1, #16]
 8004d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bfb8      	it	lt
 8004d78:	4613      	movlt	r3, r2
 8004d7a:	6033      	str	r3, [r6, #0]
 8004d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d80:	4607      	mov	r7, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	b10a      	cbz	r2, 8004d8a <_printf_common+0x26>
 8004d86:	3301      	adds	r3, #1
 8004d88:	6033      	str	r3, [r6, #0]
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	0699      	lsls	r1, r3, #26
 8004d8e:	bf42      	ittt	mi
 8004d90:	6833      	ldrmi	r3, [r6, #0]
 8004d92:	3302      	addmi	r3, #2
 8004d94:	6033      	strmi	r3, [r6, #0]
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	f015 0506 	ands.w	r5, r5, #6
 8004d9c:	d106      	bne.n	8004dac <_printf_common+0x48>
 8004d9e:	f104 0a19 	add.w	sl, r4, #25
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	6832      	ldr	r2, [r6, #0]
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	42ab      	cmp	r3, r5
 8004daa:	dc26      	bgt.n	8004dfa <_printf_common+0x96>
 8004dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db0:	1e13      	subs	r3, r2, #0
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	bf18      	it	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	0692      	lsls	r2, r2, #26
 8004dba:	d42b      	bmi.n	8004e14 <_printf_common+0xb0>
 8004dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d01e      	beq.n	8004e08 <_printf_common+0xa4>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	68e5      	ldr	r5, [r4, #12]
 8004dce:	6832      	ldr	r2, [r6, #0]
 8004dd0:	f003 0306 	and.w	r3, r3, #6
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	bf08      	it	eq
 8004dd8:	1aad      	subeq	r5, r5, r2
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	6922      	ldr	r2, [r4, #16]
 8004dde:	bf0c      	ite	eq
 8004de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de4:	2500      	movne	r5, #0
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bfc4      	itt	gt
 8004dea:	1a9b      	subgt	r3, r3, r2
 8004dec:	18ed      	addgt	r5, r5, r3
 8004dee:	2600      	movs	r6, #0
 8004df0:	341a      	adds	r4, #26
 8004df2:	42b5      	cmp	r5, r6
 8004df4:	d11a      	bne.n	8004e2c <_printf_common+0xc8>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e008      	b.n	8004e0c <_printf_common+0xa8>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	4649      	mov	r1, r9
 8004e00:	4638      	mov	r0, r7
 8004e02:	47c0      	blx	r8
 8004e04:	3001      	adds	r0, #1
 8004e06:	d103      	bne.n	8004e10 <_printf_common+0xac>
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e10:	3501      	adds	r5, #1
 8004e12:	e7c6      	b.n	8004da2 <_printf_common+0x3e>
 8004e14:	18e1      	adds	r1, r4, r3
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	2030      	movs	r0, #48	; 0x30
 8004e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e1e:	4422      	add	r2, r4
 8004e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e28:	3302      	adds	r3, #2
 8004e2a:	e7c7      	b.n	8004dbc <_printf_common+0x58>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4649      	mov	r1, r9
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	3001      	adds	r0, #1
 8004e38:	d0e6      	beq.n	8004e08 <_printf_common+0xa4>
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7d9      	b.n	8004df2 <_printf_common+0x8e>
	...

08004e40 <_printf_i>:
 8004e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	4691      	mov	r9, r2
 8004e48:	7e27      	ldrb	r7, [r4, #24]
 8004e4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e4c:	2f78      	cmp	r7, #120	; 0x78
 8004e4e:	4680      	mov	r8, r0
 8004e50:	469a      	mov	sl, r3
 8004e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e56:	d807      	bhi.n	8004e68 <_printf_i+0x28>
 8004e58:	2f62      	cmp	r7, #98	; 0x62
 8004e5a:	d80a      	bhi.n	8004e72 <_printf_i+0x32>
 8004e5c:	2f00      	cmp	r7, #0
 8004e5e:	f000 80d8 	beq.w	8005012 <_printf_i+0x1d2>
 8004e62:	2f58      	cmp	r7, #88	; 0x58
 8004e64:	f000 80a3 	beq.w	8004fae <_printf_i+0x16e>
 8004e68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e70:	e03a      	b.n	8004ee8 <_printf_i+0xa8>
 8004e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e76:	2b15      	cmp	r3, #21
 8004e78:	d8f6      	bhi.n	8004e68 <_printf_i+0x28>
 8004e7a:	a001      	add	r0, pc, #4	; (adr r0, 8004e80 <_printf_i+0x40>)
 8004e7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e80:	08004ed9 	.word	0x08004ed9
 8004e84:	08004eed 	.word	0x08004eed
 8004e88:	08004e69 	.word	0x08004e69
 8004e8c:	08004e69 	.word	0x08004e69
 8004e90:	08004e69 	.word	0x08004e69
 8004e94:	08004e69 	.word	0x08004e69
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e69 	.word	0x08004e69
 8004ea0:	08004e69 	.word	0x08004e69
 8004ea4:	08004e69 	.word	0x08004e69
 8004ea8:	08004e69 	.word	0x08004e69
 8004eac:	08004ff9 	.word	0x08004ff9
 8004eb0:	08004f1d 	.word	0x08004f1d
 8004eb4:	08004fdb 	.word	0x08004fdb
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004e69 	.word	0x08004e69
 8004ec0:	0800501b 	.word	0x0800501b
 8004ec4:	08004e69 	.word	0x08004e69
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e69 	.word	0x08004e69
 8004ed0:	08004e69 	.word	0x08004e69
 8004ed4:	08004fe3 	.word	0x08004fe3
 8004ed8:	680b      	ldr	r3, [r1, #0]
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	600a      	str	r2, [r1, #0]
 8004ee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0a3      	b.n	8005034 <_printf_i+0x1f4>
 8004eec:	6825      	ldr	r5, [r4, #0]
 8004eee:	6808      	ldr	r0, [r1, #0]
 8004ef0:	062e      	lsls	r6, r5, #24
 8004ef2:	f100 0304 	add.w	r3, r0, #4
 8004ef6:	d50a      	bpl.n	8004f0e <_printf_i+0xce>
 8004ef8:	6805      	ldr	r5, [r0, #0]
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	da03      	bge.n	8004f08 <_printf_i+0xc8>
 8004f00:	232d      	movs	r3, #45	; 0x2d
 8004f02:	426d      	negs	r5, r5
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f08:	485e      	ldr	r0, [pc, #376]	; (8005084 <_printf_i+0x244>)
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e019      	b.n	8004f42 <_printf_i+0x102>
 8004f0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f12:	6805      	ldr	r5, [r0, #0]
 8004f14:	600b      	str	r3, [r1, #0]
 8004f16:	bf18      	it	ne
 8004f18:	b22d      	sxthne	r5, r5
 8004f1a:	e7ef      	b.n	8004efc <_printf_i+0xbc>
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	6825      	ldr	r5, [r4, #0]
 8004f20:	1d18      	adds	r0, r3, #4
 8004f22:	6008      	str	r0, [r1, #0]
 8004f24:	0628      	lsls	r0, r5, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xec>
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0xf2>
 8004f2c:	0669      	lsls	r1, r5, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xe8>
 8004f30:	881d      	ldrh	r5, [r3, #0]
 8004f32:	4854      	ldr	r0, [pc, #336]	; (8005084 <_printf_i+0x244>)
 8004f34:	2f6f      	cmp	r7, #111	; 0x6f
 8004f36:	bf0c      	ite	eq
 8004f38:	2308      	moveq	r3, #8
 8004f3a:	230a      	movne	r3, #10
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f42:	6866      	ldr	r6, [r4, #4]
 8004f44:	60a6      	str	r6, [r4, #8]
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	bfa2      	ittt	ge
 8004f4a:	6821      	ldrge	r1, [r4, #0]
 8004f4c:	f021 0104 	bicge.w	r1, r1, #4
 8004f50:	6021      	strge	r1, [r4, #0]
 8004f52:	b90d      	cbnz	r5, 8004f58 <_printf_i+0x118>
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d04d      	beq.n	8004ff4 <_printf_i+0x1b4>
 8004f58:	4616      	mov	r6, r2
 8004f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f62:	5dc7      	ldrb	r7, [r0, r7]
 8004f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f68:	462f      	mov	r7, r5
 8004f6a:	42bb      	cmp	r3, r7
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	d9f4      	bls.n	8004f5a <_printf_i+0x11a>
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <_printf_i+0x14c>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07df      	lsls	r7, r3, #31
 8004f78:	d508      	bpl.n	8004f8c <_printf_i+0x14c>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	bfde      	ittt	le
 8004f82:	2330      	movle	r3, #48	; 0x30
 8004f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f8c:	1b92      	subs	r2, r2, r6
 8004f8e:	6122      	str	r2, [r4, #16]
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	464b      	mov	r3, r9
 8004f96:	aa03      	add	r2, sp, #12
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff fee2 	bl	8004d64 <_printf_common>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d14c      	bne.n	800503e <_printf_i+0x1fe>
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	b004      	add	sp, #16
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	4835      	ldr	r0, [pc, #212]	; (8005084 <_printf_i+0x244>)
 8004fb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	680e      	ldr	r6, [r1, #0]
 8004fb8:	061f      	lsls	r7, r3, #24
 8004fba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fbe:	600e      	str	r6, [r1, #0]
 8004fc0:	d514      	bpl.n	8004fec <_printf_i+0x1ac>
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	bf44      	itt	mi
 8004fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fca:	6023      	strmi	r3, [r4, #0]
 8004fcc:	b91d      	cbnz	r5, 8004fd6 <_printf_i+0x196>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f023 0320 	bic.w	r3, r3, #32
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	e7b0      	b.n	8004f3c <_printf_i+0xfc>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	2378      	movs	r3, #120	; 0x78
 8004fe4:	4828      	ldr	r0, [pc, #160]	; (8005088 <_printf_i+0x248>)
 8004fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fea:	e7e3      	b.n	8004fb4 <_printf_i+0x174>
 8004fec:	065e      	lsls	r6, r3, #25
 8004fee:	bf48      	it	mi
 8004ff0:	b2ad      	uxthmi	r5, r5
 8004ff2:	e7e6      	b.n	8004fc2 <_printf_i+0x182>
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	e7bb      	b.n	8004f70 <_printf_i+0x130>
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	6826      	ldr	r6, [r4, #0]
 8004ffc:	6960      	ldr	r0, [r4, #20]
 8004ffe:	1d1d      	adds	r5, r3, #4
 8005000:	600d      	str	r5, [r1, #0]
 8005002:	0635      	lsls	r5, r6, #24
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	d501      	bpl.n	800500c <_printf_i+0x1cc>
 8005008:	6018      	str	r0, [r3, #0]
 800500a:	e002      	b.n	8005012 <_printf_i+0x1d2>
 800500c:	0671      	lsls	r1, r6, #25
 800500e:	d5fb      	bpl.n	8005008 <_printf_i+0x1c8>
 8005010:	8018      	strh	r0, [r3, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	4616      	mov	r6, r2
 8005018:	e7ba      	b.n	8004f90 <_printf_i+0x150>
 800501a:	680b      	ldr	r3, [r1, #0]
 800501c:	1d1a      	adds	r2, r3, #4
 800501e:	600a      	str	r2, [r1, #0]
 8005020:	681e      	ldr	r6, [r3, #0]
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	2100      	movs	r1, #0
 8005026:	4630      	mov	r0, r6
 8005028:	f7fb f8e2 	bl	80001f0 <memchr>
 800502c:	b108      	cbz	r0, 8005032 <_printf_i+0x1f2>
 800502e:	1b80      	subs	r0, r0, r6
 8005030:	6060      	str	r0, [r4, #4]
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	2300      	movs	r3, #0
 8005038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503c:	e7a8      	b.n	8004f90 <_printf_i+0x150>
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	4632      	mov	r2, r6
 8005042:	4649      	mov	r1, r9
 8005044:	4640      	mov	r0, r8
 8005046:	47d0      	blx	sl
 8005048:	3001      	adds	r0, #1
 800504a:	d0ab      	beq.n	8004fa4 <_printf_i+0x164>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	079b      	lsls	r3, r3, #30
 8005050:	d413      	bmi.n	800507a <_printf_i+0x23a>
 8005052:	68e0      	ldr	r0, [r4, #12]
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	4298      	cmp	r0, r3
 8005058:	bfb8      	it	lt
 800505a:	4618      	movlt	r0, r3
 800505c:	e7a4      	b.n	8004fa8 <_printf_i+0x168>
 800505e:	2301      	movs	r3, #1
 8005060:	4632      	mov	r2, r6
 8005062:	4649      	mov	r1, r9
 8005064:	4640      	mov	r0, r8
 8005066:	47d0      	blx	sl
 8005068:	3001      	adds	r0, #1
 800506a:	d09b      	beq.n	8004fa4 <_printf_i+0x164>
 800506c:	3501      	adds	r5, #1
 800506e:	68e3      	ldr	r3, [r4, #12]
 8005070:	9903      	ldr	r1, [sp, #12]
 8005072:	1a5b      	subs	r3, r3, r1
 8005074:	42ab      	cmp	r3, r5
 8005076:	dcf2      	bgt.n	800505e <_printf_i+0x21e>
 8005078:	e7eb      	b.n	8005052 <_printf_i+0x212>
 800507a:	2500      	movs	r5, #0
 800507c:	f104 0619 	add.w	r6, r4, #25
 8005080:	e7f5      	b.n	800506e <_printf_i+0x22e>
 8005082:	bf00      	nop
 8005084:	080154a9 	.word	0x080154a9
 8005088:	080154ba 	.word	0x080154ba

0800508c <memcpy>:
 800508c:	440a      	add	r2, r1
 800508e:	4291      	cmp	r1, r2
 8005090:	f100 33ff 	add.w	r3, r0, #4294967295
 8005094:	d100      	bne.n	8005098 <memcpy+0xc>
 8005096:	4770      	bx	lr
 8005098:	b510      	push	{r4, lr}
 800509a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a2:	4291      	cmp	r1, r2
 80050a4:	d1f9      	bne.n	800509a <memcpy+0xe>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <memmove>:
 80050a8:	4288      	cmp	r0, r1
 80050aa:	b510      	push	{r4, lr}
 80050ac:	eb01 0402 	add.w	r4, r1, r2
 80050b0:	d902      	bls.n	80050b8 <memmove+0x10>
 80050b2:	4284      	cmp	r4, r0
 80050b4:	4623      	mov	r3, r4
 80050b6:	d807      	bhi.n	80050c8 <memmove+0x20>
 80050b8:	1e43      	subs	r3, r0, #1
 80050ba:	42a1      	cmp	r1, r4
 80050bc:	d008      	beq.n	80050d0 <memmove+0x28>
 80050be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050c6:	e7f8      	b.n	80050ba <memmove+0x12>
 80050c8:	4402      	add	r2, r0
 80050ca:	4601      	mov	r1, r0
 80050cc:	428a      	cmp	r2, r1
 80050ce:	d100      	bne.n	80050d2 <memmove+0x2a>
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050da:	e7f7      	b.n	80050cc <memmove+0x24>

080050dc <_free_r>:
 80050dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050de:	2900      	cmp	r1, #0
 80050e0:	d048      	beq.n	8005174 <_free_r+0x98>
 80050e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e6:	9001      	str	r0, [sp, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f1a1 0404 	sub.w	r4, r1, #4
 80050ee:	bfb8      	it	lt
 80050f0:	18e4      	addlt	r4, r4, r3
 80050f2:	f000 f8d3 	bl	800529c <__malloc_lock>
 80050f6:	4a20      	ldr	r2, [pc, #128]	; (8005178 <_free_r+0x9c>)
 80050f8:	9801      	ldr	r0, [sp, #4]
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	4615      	mov	r5, r2
 80050fe:	b933      	cbnz	r3, 800510e <_free_r+0x32>
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	6014      	str	r4, [r2, #0]
 8005104:	b003      	add	sp, #12
 8005106:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800510a:	f000 b8cd 	b.w	80052a8 <__malloc_unlock>
 800510e:	42a3      	cmp	r3, r4
 8005110:	d90b      	bls.n	800512a <_free_r+0x4e>
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	1862      	adds	r2, r4, r1
 8005116:	4293      	cmp	r3, r2
 8005118:	bf04      	itt	eq
 800511a:	681a      	ldreq	r2, [r3, #0]
 800511c:	685b      	ldreq	r3, [r3, #4]
 800511e:	6063      	str	r3, [r4, #4]
 8005120:	bf04      	itt	eq
 8005122:	1852      	addeq	r2, r2, r1
 8005124:	6022      	streq	r2, [r4, #0]
 8005126:	602c      	str	r4, [r5, #0]
 8005128:	e7ec      	b.n	8005104 <_free_r+0x28>
 800512a:	461a      	mov	r2, r3
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	b10b      	cbz	r3, 8005134 <_free_r+0x58>
 8005130:	42a3      	cmp	r3, r4
 8005132:	d9fa      	bls.n	800512a <_free_r+0x4e>
 8005134:	6811      	ldr	r1, [r2, #0]
 8005136:	1855      	adds	r5, r2, r1
 8005138:	42a5      	cmp	r5, r4
 800513a:	d10b      	bne.n	8005154 <_free_r+0x78>
 800513c:	6824      	ldr	r4, [r4, #0]
 800513e:	4421      	add	r1, r4
 8005140:	1854      	adds	r4, r2, r1
 8005142:	42a3      	cmp	r3, r4
 8005144:	6011      	str	r1, [r2, #0]
 8005146:	d1dd      	bne.n	8005104 <_free_r+0x28>
 8005148:	681c      	ldr	r4, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	6053      	str	r3, [r2, #4]
 800514e:	4421      	add	r1, r4
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	e7d7      	b.n	8005104 <_free_r+0x28>
 8005154:	d902      	bls.n	800515c <_free_r+0x80>
 8005156:	230c      	movs	r3, #12
 8005158:	6003      	str	r3, [r0, #0]
 800515a:	e7d3      	b.n	8005104 <_free_r+0x28>
 800515c:	6825      	ldr	r5, [r4, #0]
 800515e:	1961      	adds	r1, r4, r5
 8005160:	428b      	cmp	r3, r1
 8005162:	bf04      	itt	eq
 8005164:	6819      	ldreq	r1, [r3, #0]
 8005166:	685b      	ldreq	r3, [r3, #4]
 8005168:	6063      	str	r3, [r4, #4]
 800516a:	bf04      	itt	eq
 800516c:	1949      	addeq	r1, r1, r5
 800516e:	6021      	streq	r1, [r4, #0]
 8005170:	6054      	str	r4, [r2, #4]
 8005172:	e7c7      	b.n	8005104 <_free_r+0x28>
 8005174:	b003      	add	sp, #12
 8005176:	bd30      	pop	{r4, r5, pc}
 8005178:	20000110 	.word	0x20000110

0800517c <_malloc_r>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	1ccd      	adds	r5, r1, #3
 8005180:	f025 0503 	bic.w	r5, r5, #3
 8005184:	3508      	adds	r5, #8
 8005186:	2d0c      	cmp	r5, #12
 8005188:	bf38      	it	cc
 800518a:	250c      	movcc	r5, #12
 800518c:	2d00      	cmp	r5, #0
 800518e:	4606      	mov	r6, r0
 8005190:	db01      	blt.n	8005196 <_malloc_r+0x1a>
 8005192:	42a9      	cmp	r1, r5
 8005194:	d903      	bls.n	800519e <_malloc_r+0x22>
 8005196:	230c      	movs	r3, #12
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	2000      	movs	r0, #0
 800519c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800519e:	f000 f87d 	bl	800529c <__malloc_lock>
 80051a2:	4921      	ldr	r1, [pc, #132]	; (8005228 <_malloc_r+0xac>)
 80051a4:	680a      	ldr	r2, [r1, #0]
 80051a6:	4614      	mov	r4, r2
 80051a8:	b99c      	cbnz	r4, 80051d2 <_malloc_r+0x56>
 80051aa:	4f20      	ldr	r7, [pc, #128]	; (800522c <_malloc_r+0xb0>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b923      	cbnz	r3, 80051ba <_malloc_r+0x3e>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 f862 	bl	800527c <_sbrk_r>
 80051b8:	6038      	str	r0, [r7, #0]
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 f85d 	bl	800527c <_sbrk_r>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	d123      	bne.n	800520e <_malloc_r+0x92>
 80051c6:	230c      	movs	r3, #12
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	4630      	mov	r0, r6
 80051cc:	f000 f86c 	bl	80052a8 <__malloc_unlock>
 80051d0:	e7e3      	b.n	800519a <_malloc_r+0x1e>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	1b5b      	subs	r3, r3, r5
 80051d6:	d417      	bmi.n	8005208 <_malloc_r+0x8c>
 80051d8:	2b0b      	cmp	r3, #11
 80051da:	d903      	bls.n	80051e4 <_malloc_r+0x68>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	441c      	add	r4, r3
 80051e0:	6025      	str	r5, [r4, #0]
 80051e2:	e004      	b.n	80051ee <_malloc_r+0x72>
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	42a2      	cmp	r2, r4
 80051e8:	bf0c      	ite	eq
 80051ea:	600b      	streq	r3, [r1, #0]
 80051ec:	6053      	strne	r3, [r2, #4]
 80051ee:	4630      	mov	r0, r6
 80051f0:	f000 f85a 	bl	80052a8 <__malloc_unlock>
 80051f4:	f104 000b 	add.w	r0, r4, #11
 80051f8:	1d23      	adds	r3, r4, #4
 80051fa:	f020 0007 	bic.w	r0, r0, #7
 80051fe:	1ac2      	subs	r2, r0, r3
 8005200:	d0cc      	beq.n	800519c <_malloc_r+0x20>
 8005202:	1a1b      	subs	r3, r3, r0
 8005204:	50a3      	str	r3, [r4, r2]
 8005206:	e7c9      	b.n	800519c <_malloc_r+0x20>
 8005208:	4622      	mov	r2, r4
 800520a:	6864      	ldr	r4, [r4, #4]
 800520c:	e7cc      	b.n	80051a8 <_malloc_r+0x2c>
 800520e:	1cc4      	adds	r4, r0, #3
 8005210:	f024 0403 	bic.w	r4, r4, #3
 8005214:	42a0      	cmp	r0, r4
 8005216:	d0e3      	beq.n	80051e0 <_malloc_r+0x64>
 8005218:	1a21      	subs	r1, r4, r0
 800521a:	4630      	mov	r0, r6
 800521c:	f000 f82e 	bl	800527c <_sbrk_r>
 8005220:	3001      	adds	r0, #1
 8005222:	d1dd      	bne.n	80051e0 <_malloc_r+0x64>
 8005224:	e7cf      	b.n	80051c6 <_malloc_r+0x4a>
 8005226:	bf00      	nop
 8005228:	20000110 	.word	0x20000110
 800522c:	20000114 	.word	0x20000114

08005230 <_realloc_r>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4607      	mov	r7, r0
 8005234:	4614      	mov	r4, r2
 8005236:	460e      	mov	r6, r1
 8005238:	b921      	cbnz	r1, 8005244 <_realloc_r+0x14>
 800523a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800523e:	4611      	mov	r1, r2
 8005240:	f7ff bf9c 	b.w	800517c <_malloc_r>
 8005244:	b922      	cbnz	r2, 8005250 <_realloc_r+0x20>
 8005246:	f7ff ff49 	bl	80050dc <_free_r>
 800524a:	4625      	mov	r5, r4
 800524c:	4628      	mov	r0, r5
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	f000 f830 	bl	80052b4 <_malloc_usable_size_r>
 8005254:	42a0      	cmp	r0, r4
 8005256:	d20f      	bcs.n	8005278 <_realloc_r+0x48>
 8005258:	4621      	mov	r1, r4
 800525a:	4638      	mov	r0, r7
 800525c:	f7ff ff8e 	bl	800517c <_malloc_r>
 8005260:	4605      	mov	r5, r0
 8005262:	2800      	cmp	r0, #0
 8005264:	d0f2      	beq.n	800524c <_realloc_r+0x1c>
 8005266:	4631      	mov	r1, r6
 8005268:	4622      	mov	r2, r4
 800526a:	f7ff ff0f 	bl	800508c <memcpy>
 800526e:	4631      	mov	r1, r6
 8005270:	4638      	mov	r0, r7
 8005272:	f7ff ff33 	bl	80050dc <_free_r>
 8005276:	e7e9      	b.n	800524c <_realloc_r+0x1c>
 8005278:	4635      	mov	r5, r6
 800527a:	e7e7      	b.n	800524c <_realloc_r+0x1c>

0800527c <_sbrk_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4d06      	ldr	r5, [pc, #24]	; (8005298 <_sbrk_r+0x1c>)
 8005280:	2300      	movs	r3, #0
 8005282:	4604      	mov	r4, r0
 8005284:	4608      	mov	r0, r1
 8005286:	602b      	str	r3, [r5, #0]
 8005288:	f7fc faaa 	bl	80017e0 <_sbrk>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_sbrk_r+0x1a>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_sbrk_r+0x1a>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	20000250 	.word	0x20000250

0800529c <__malloc_lock>:
 800529c:	4801      	ldr	r0, [pc, #4]	; (80052a4 <__malloc_lock+0x8>)
 800529e:	f000 b811 	b.w	80052c4 <__retarget_lock_acquire_recursive>
 80052a2:	bf00      	nop
 80052a4:	20000258 	.word	0x20000258

080052a8 <__malloc_unlock>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__malloc_unlock+0x8>)
 80052aa:	f000 b80c 	b.w	80052c6 <__retarget_lock_release_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000258 	.word	0x20000258

080052b4 <_malloc_usable_size_r>:
 80052b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b8:	1f18      	subs	r0, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bfbc      	itt	lt
 80052be:	580b      	ldrlt	r3, [r1, r0]
 80052c0:	18c0      	addlt	r0, r0, r3
 80052c2:	4770      	bx	lr

080052c4 <__retarget_lock_acquire_recursive>:
 80052c4:	4770      	bx	lr

080052c6 <__retarget_lock_release_recursive>:
 80052c6:	4770      	bx	lr

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
